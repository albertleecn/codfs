// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ncvfs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class ListDirectoryRequest;
class FileList;
class FileInfo;

// ===================================================================

class ListDirectoryRequest : public ::google::protobuf::Message {
 public:
  ListDirectoryRequest();
  virtual ~ListDirectoryRequest();
  
  ListDirectoryRequest(const ListDirectoryRequest& from);
  
  inline ListDirectoryRequest& operator=(const ListDirectoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDirectoryRequest& default_instance();
  
  void Swap(ListDirectoryRequest* other);
  
  // implements Message ----------------------------------------------
  
  ListDirectoryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListDirectoryRequest& from);
  void MergeFrom(const ListDirectoryRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 osdId = 1;
  inline bool has_osdid() const;
  inline void clear_osdid();
  static const int kOsdIdFieldNumber = 1;
  inline ::google::protobuf::int32 osdid() const;
  inline void set_osdid(::google::protobuf::int32 value);
  
  // optional string directoryPath = 2;
  inline bool has_directorypath() const;
  inline void clear_directorypath();
  static const int kDirectoryPathFieldNumber = 2;
  inline const ::std::string& directorypath() const;
  inline void set_directorypath(const ::std::string& value);
  inline void set_directorypath(const char* value);
  inline void set_directorypath(const char* value, size_t size);
  inline ::std::string* mutable_directorypath();
  inline ::std::string* release_directorypath();
  
  // @@protoc_insertion_point(class_scope:ncvfs.ListDirectoryRequest)
 private:
  inline void set_has_osdid();
  inline void clear_has_osdid();
  inline void set_has_directorypath();
  inline void clear_has_directorypath();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* directorypath_;
  ::google::protobuf::int32 osdid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static ListDirectoryRequest* default_instance_;
};
// -------------------------------------------------------------------

class FileList : public ::google::protobuf::Message {
 public:
  FileList();
  virtual ~FileList();
  
  FileList(const FileList& from);
  
  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileList& default_instance();
  
  void Swap(FileList* other);
  
  // implements Message ----------------------------------------------
  
  FileList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ncvfs.FileInfo fileInfo = 1;
  inline int fileinfo_size() const;
  inline void clear_fileinfo();
  static const int kFileInfoFieldNumber = 1;
  inline const ::ncvfs::FileInfo& fileinfo(int index) const;
  inline ::ncvfs::FileInfo* mutable_fileinfo(int index);
  inline ::ncvfs::FileInfo* add_fileinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ncvfs::FileInfo >&
      fileinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ncvfs::FileInfo >*
      mutable_fileinfo();
  
  // @@protoc_insertion_point(class_scope:ncvfs.FileList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ncvfs::FileInfo > fileinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static FileList* default_instance_;
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::Message {
 public:
  FileInfo();
  virtual ~FileInfo();
  
  FileInfo(const FileInfo& from);
  
  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfo& default_instance();
  
  void Swap(FileInfo* other);
  
  // implements Message ----------------------------------------------
  
  FileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 fileId = 1;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 1;
  inline ::google::protobuf::int32 fileid() const;
  inline void set_fileid(::google::protobuf::int32 value);
  
  // optional int32 filesize = 2;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFilesizeFieldNumber = 2;
  inline ::google::protobuf::int32 filesize() const;
  inline void set_filesize(::google::protobuf::int32 value);
  
  // optional string filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  
  // @@protoc_insertion_point(class_scope:ncvfs.FileInfo)
 private:
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_filesize();
  inline void clear_has_filesize();
  inline void set_has_filename();
  inline void clear_has_filename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 fileid_;
  ::google::protobuf::int32 filesize_;
  ::std::string* filename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static FileInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ListDirectoryRequest

// optional int32 osdId = 1;
inline bool ListDirectoryRequest::has_osdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListDirectoryRequest::set_has_osdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListDirectoryRequest::clear_has_osdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListDirectoryRequest::clear_osdid() {
  osdid_ = 0;
  clear_has_osdid();
}
inline ::google::protobuf::int32 ListDirectoryRequest::osdid() const {
  return osdid_;
}
inline void ListDirectoryRequest::set_osdid(::google::protobuf::int32 value) {
  set_has_osdid();
  osdid_ = value;
}

// optional string directoryPath = 2;
inline bool ListDirectoryRequest::has_directorypath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListDirectoryRequest::set_has_directorypath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListDirectoryRequest::clear_has_directorypath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListDirectoryRequest::clear_directorypath() {
  if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
    directorypath_->clear();
  }
  clear_has_directorypath();
}
inline const ::std::string& ListDirectoryRequest::directorypath() const {
  return *directorypath_;
}
inline void ListDirectoryRequest::set_directorypath(const ::std::string& value) {
  set_has_directorypath();
  if (directorypath_ == &::google::protobuf::internal::kEmptyString) {
    directorypath_ = new ::std::string;
  }
  directorypath_->assign(value);
}
inline void ListDirectoryRequest::set_directorypath(const char* value) {
  set_has_directorypath();
  if (directorypath_ == &::google::protobuf::internal::kEmptyString) {
    directorypath_ = new ::std::string;
  }
  directorypath_->assign(value);
}
inline void ListDirectoryRequest::set_directorypath(const char* value, size_t size) {
  set_has_directorypath();
  if (directorypath_ == &::google::protobuf::internal::kEmptyString) {
    directorypath_ = new ::std::string;
  }
  directorypath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListDirectoryRequest::mutable_directorypath() {
  set_has_directorypath();
  if (directorypath_ == &::google::protobuf::internal::kEmptyString) {
    directorypath_ = new ::std::string;
  }
  return directorypath_;
}
inline ::std::string* ListDirectoryRequest::release_directorypath() {
  clear_has_directorypath();
  if (directorypath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = directorypath_;
    directorypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FileList

// repeated .ncvfs.FileInfo fileInfo = 1;
inline int FileList::fileinfo_size() const {
  return fileinfo_.size();
}
inline void FileList::clear_fileinfo() {
  fileinfo_.Clear();
}
inline const ::ncvfs::FileInfo& FileList::fileinfo(int index) const {
  return fileinfo_.Get(index);
}
inline ::ncvfs::FileInfo* FileList::mutable_fileinfo(int index) {
  return fileinfo_.Mutable(index);
}
inline ::ncvfs::FileInfo* FileList::add_fileinfo() {
  return fileinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ncvfs::FileInfo >&
FileList::fileinfo() const {
  return fileinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ncvfs::FileInfo >*
FileList::mutable_fileinfo() {
  return &fileinfo_;
}

// -------------------------------------------------------------------

// FileInfo

// optional int32 fileId = 1;
inline bool FileInfo::has_fileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileInfo::set_has_fileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileInfo::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileInfo::clear_fileid() {
  fileid_ = 0;
  clear_has_fileid();
}
inline ::google::protobuf::int32 FileInfo::fileid() const {
  return fileid_;
}
inline void FileInfo::set_fileid(::google::protobuf::int32 value) {
  set_has_fileid();
  fileid_ = value;
}

// optional int32 filesize = 2;
inline bool FileInfo::has_filesize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileInfo::set_has_filesize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileInfo::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileInfo::clear_filesize() {
  filesize_ = 0;
  clear_has_filesize();
}
inline ::google::protobuf::int32 FileInfo::filesize() const {
  return filesize_;
}
inline void FileInfo::set_filesize(::google::protobuf::int32 value) {
  set_has_filesize();
  filesize_ = value;
}

// optional string filename = 3;
inline bool FileInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileInfo::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& FileInfo::filename() const {
  return *filename_;
}
inline void FileInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileInfo::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileInfo::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* FileInfo::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ncvfs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
