package ncvfs;

///////////////// UNIVERSAL /////////////////

message HandshakeRequestPro {
	optional fixed32 componentId = 1;
	 
	
	enum ComponentType {
		CLIENT = 1;
		OSD = 2;
		MDS = 3;
		MONITOR = 4;
	}
  
  	optional ComponentType componentType = 2;
}

message HandshakeReplyPro {
	optional fixed32 componentId = 1;
	optional HandshakeRequestPro.ComponentType componentType = 2; 
}

///////////////// FROM CLIENT /////////////////

//
// CLIENT -> MDS
//

message ListDirectoryRequestPro {
	optional fixed32 osdId = 1;
	optional string directoryPath = 2;
}

message UploadFileRequestPro {
	optional fixed32 clientId = 1;
	optional fixed64 fileSize = 2;
	optional fixed32 numOfObjs = 3;
	optional string path = 4;
}

//
// CLIENT -> OSD
//

message PutObjectInitRequestPro {
	optional fixed64 objectId = 1;
	optional fixed32 objectSize = 2;
	optional fixed32 chunkCount = 3;
	
	enum CodingScheme {
		RAID0_CODING = 1;
		RAID1_CODING = 2;
	}
	
	optional CodingScheme codingScheme = 4;
}

message ObjectDataPro {
	optional fixed64 objectId = 1;
	optional fixed64 offset = 2;
	optional fixed32 length = 3;
}

message PutObjectEndRequestPro {
	optional fixed64 objectId = 1;
}

///////////////// FROM MDS /////////////////

//
// MDS -> CLIENT
//

message ListDirectoryReplyPro {
	repeated FileInfoPro fileInfoPro = 1;
} 

message FileInfoPro {
	optional fixed32 fileId = 1;
	optional fixed64 fileSize = 2;
	optional string fileName = 3;
}

message UploadFileReplyPro {
	optional fixed32 fileId = 1;
	repeated fixed64 objectList = 2;
	repeated fixed32 primaryList = 3;
}

///////////////// FROM OSD /////////////////

//
// OSD -> MDS
//
message UploadObjectAckPro {
	optional fixed64 objectId = 1;
	repeated fixed32 nodeList = 2;
}

//
// OSD -> CLIENT
//

message PutObjectInitReplyPro {
	optional fixed64 objectId = 1;
}

message PutObjectEndReplyPro {
	optional fixed64 objectId = 1;
}

//
// OSD -> OSD
//

message PutSegmentInitRequestPro {
	optional fixed64 objectId = 1;
	optional fixed32 segmentId = 2;
	optional fixed32 segmentSize = 3;
	optional fixed32 chunkCount = 4;
}

message SegmentDataPro {
	optional fixed64 objectId = 1;
	optional fixed32 segmentId = 2;
	optional fixed64 offset = 3;
	optional fixed32 length = 4;
}

message PutSegmentEndRequestPro {
	optional fixed64 objectId = 1;
	optional fixed32 segmentId = 2;
}

message PutSegmentInitReplyPro {
	optional fixed64 objectId = 1;
	optional fixed32 segmentId = 2;
}

message PutSegmentEndReplyPro {
	optional fixed64 objectId = 1;
	optional fixed32 segmentId = 2;
}

//
// OSD -> MONITOR 
//
message OsdStartupPro {
	optional fixed32 osdId = 1;
	optional fixed32 osdCapacity = 2;
	optional fixed32 osdLoading = 3;
}

message OsdShutdownPro {
	optional fixed32 osdId = 1;
}

message OsdStatUpdateReplyPro {
	optional fixed32 osdId = 1;
	optional fixed32 osdCapacity = 2;
	optional fixed32 osdLoading = 3;
}


///////////////// FROM MONITOR /////////////////
//
// MONITOR -> OSD
//

message OsdStatUpdateRequestPro {

}
