// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ncvfs {

namespace {

const ::google::protobuf::Descriptor* ListDirectoryRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDirectoryRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDirectoryReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDirectoryReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileInfoPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfoPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutObjectInitPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutObjectInitPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutObjectEndPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutObjectEndPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectDataPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDataPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentInitPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentInitPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentEndPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentEndPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentDataPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentDataPro_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  ListDirectoryRequestPro_descriptor_ = file->message_type(0);
  static const int ListDirectoryRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, directorypath_),
  };
  ListDirectoryRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDirectoryRequestPro_descriptor_,
      ListDirectoryRequestPro::default_instance_,
      ListDirectoryRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDirectoryRequestPro));
  ListDirectoryReplyPro_descriptor_ = file->message_type(1);
  static const int ListDirectoryReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, fileinfopro_),
  };
  ListDirectoryReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDirectoryReplyPro_descriptor_,
      ListDirectoryReplyPro::default_instance_,
      ListDirectoryReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDirectoryReplyPro));
  FileInfoPro_descriptor_ = file->message_type(2);
  static const int FileInfoPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, filename_),
  };
  FileInfoPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInfoPro_descriptor_,
      FileInfoPro::default_instance_,
      FileInfoPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInfoPro));
  PutObjectInitPro_descriptor_ = file->message_type(3);
  static const int PutObjectInitPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitPro, objectsize_),
  };
  PutObjectInitPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutObjectInitPro_descriptor_,
      PutObjectInitPro::default_instance_,
      PutObjectInitPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutObjectInitPro));
  PutObjectEndPro_descriptor_ = file->message_type(4);
  static const int PutObjectEndPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndPro, objectid_),
  };
  PutObjectEndPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutObjectEndPro_descriptor_,
      PutObjectEndPro::default_instance_,
      PutObjectEndPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutObjectEndPro));
  ObjectDataPro_descriptor_ = file->message_type(5);
  static const int ObjectDataPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, length_),
  };
  ObjectDataPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectDataPro_descriptor_,
      ObjectDataPro::default_instance_,
      ObjectDataPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectDataPro));
  PutSegmentInitPro_descriptor_ = file->message_type(6);
  static const int PutSegmentInitPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitPro, segmentsize_),
  };
  PutSegmentInitPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentInitPro_descriptor_,
      PutSegmentInitPro::default_instance_,
      PutSegmentInitPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentInitPro));
  PutSegmentEndPro_descriptor_ = file->message_type(7);
  static const int PutSegmentEndPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndPro, segmentid_),
  };
  PutSegmentEndPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentEndPro_descriptor_,
      PutSegmentEndPro::default_instance_,
      PutSegmentEndPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentEndPro));
  SegmentDataPro_descriptor_ = file->message_type(8);
  static const int SegmentDataPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, length_),
  };
  SegmentDataPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentDataPro_descriptor_,
      SegmentDataPro::default_instance_,
      SegmentDataPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentDataPro));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDirectoryRequestPro_descriptor_, &ListDirectoryRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDirectoryReplyPro_descriptor_, &ListDirectoryReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInfoPro_descriptor_, &FileInfoPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutObjectInitPro_descriptor_, &PutObjectInitPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutObjectEndPro_descriptor_, &PutObjectEndPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectDataPro_descriptor_, &ObjectDataPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentInitPro_descriptor_, &PutSegmentInitPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentEndPro_descriptor_, &PutSegmentEndPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentDataPro_descriptor_, &SegmentDataPro::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete ListDirectoryRequestPro::default_instance_;
  delete ListDirectoryRequestPro_reflection_;
  delete ListDirectoryReplyPro::default_instance_;
  delete ListDirectoryReplyPro_reflection_;
  delete FileInfoPro::default_instance_;
  delete FileInfoPro_reflection_;
  delete PutObjectInitPro::default_instance_;
  delete PutObjectInitPro_reflection_;
  delete PutObjectEndPro::default_instance_;
  delete PutObjectEndPro_reflection_;
  delete ObjectDataPro::default_instance_;
  delete ObjectDataPro_reflection_;
  delete PutSegmentInitPro::default_instance_;
  delete PutSegmentInitPro_reflection_;
  delete PutSegmentEndPro::default_instance_;
  delete PutSegmentEndPro_reflection_;
  delete SegmentDataPro::default_instance_;
  delete SegmentDataPro_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\005ncvfs\"\?\n\027ListDirectoryR"
    "equestPro\022\r\n\005osdId\030\001 \001(\005\022\025\n\rdirectoryPat"
    "h\030\002 \001(\t\"@\n\025ListDirectoryReplyPro\022\'\n\013file"
    "InfoPro\030\001 \003(\0132\022.ncvfs.FileInfoPro\"A\n\013Fil"
    "eInfoPro\022\016\n\006fileId\030\001 \001(\007\022\020\n\010fileSize\030\002 \001"
    "(\006\022\020\n\010fileName\030\003 \001(\t\"8\n\020PutObjectInitPro"
    "\022\020\n\010objectId\030\001 \001(\006\022\022\n\nobjectSize\030\002 \001(\007\"#"
    "\n\017PutObjectEndPro\022\020\n\010objectId\030\001 \001(\006\"A\n\rO"
    "bjectDataPro\022\020\n\010objectId\030\001 \001(\006\022\016\n\006offset"
    "\030\002 \001(\006\022\016\n\006length\030\003 \001(\007\"M\n\021PutSegmentInit"
    "Pro\022\020\n\010objectId\030\001 \001(\006\022\021\n\tsegmentId\030\002 \001(\007"
    "\022\023\n\013segmentSize\030\003 \001(\007\"7\n\020PutSegmentEndPr"
    "o\022\020\n\010objectId\030\001 \001(\006\022\021\n\tsegmentId\030\002 \001(\007\"U"
    "\n\016SegmentDataPro\022\020\n\010objectId\030\001 \001(\006\022\021\n\tse"
    "gmentId\030\002 \001(\007\022\016\n\006offset\030\003 \001(\006\022\016\n\006length\030"
    "\004 \001(\007", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ListDirectoryRequestPro::default_instance_ = new ListDirectoryRequestPro();
  ListDirectoryReplyPro::default_instance_ = new ListDirectoryReplyPro();
  FileInfoPro::default_instance_ = new FileInfoPro();
  PutObjectInitPro::default_instance_ = new PutObjectInitPro();
  PutObjectEndPro::default_instance_ = new PutObjectEndPro();
  ObjectDataPro::default_instance_ = new ObjectDataPro();
  PutSegmentInitPro::default_instance_ = new PutSegmentInitPro();
  PutSegmentEndPro::default_instance_ = new PutSegmentEndPro();
  SegmentDataPro::default_instance_ = new SegmentDataPro();
  ListDirectoryRequestPro::default_instance_->InitAsDefaultInstance();
  ListDirectoryReplyPro::default_instance_->InitAsDefaultInstance();
  FileInfoPro::default_instance_->InitAsDefaultInstance();
  PutObjectInitPro::default_instance_->InitAsDefaultInstance();
  PutObjectEndPro::default_instance_->InitAsDefaultInstance();
  ObjectDataPro::default_instance_->InitAsDefaultInstance();
  PutSegmentInitPro::default_instance_->InitAsDefaultInstance();
  PutSegmentEndPro::default_instance_->InitAsDefaultInstance();
  SegmentDataPro::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ListDirectoryRequestPro::kOsdIdFieldNumber;
const int ListDirectoryRequestPro::kDirectoryPathFieldNumber;
#endif  // !_MSC_VER

ListDirectoryRequestPro::ListDirectoryRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListDirectoryRequestPro::InitAsDefaultInstance() {
}

ListDirectoryRequestPro::ListDirectoryRequestPro(const ListDirectoryRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListDirectoryRequestPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0;
  directorypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDirectoryRequestPro::~ListDirectoryRequestPro() {
  SharedDtor();
}

void ListDirectoryRequestPro::SharedDtor() {
  if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
    delete directorypath_;
  }
  if (this != default_instance_) {
  }
}

void ListDirectoryRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectoryRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDirectoryRequestPro_descriptor_;
}

const ListDirectoryRequestPro& ListDirectoryRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ListDirectoryRequestPro* ListDirectoryRequestPro::default_instance_ = NULL;

ListDirectoryRequestPro* ListDirectoryRequestPro::New() const {
  return new ListDirectoryRequestPro;
}

void ListDirectoryRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0;
    if (has_directorypath()) {
      if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
        directorypath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDirectoryRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_directoryPath;
        break;
      }
      
      // optional string directoryPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directoryPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directorypath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directorypath().data(), this->directorypath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListDirectoryRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->osdid(), output);
  }
  
  // optional string directoryPath = 2;
  if (has_directorypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directorypath().data(), this->directorypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->directorypath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListDirectoryRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->osdid(), target);
  }
  
  // optional string directoryPath = 2;
  if (has_directorypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directorypath().data(), this->directorypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directorypath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListDirectoryRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->osdid());
    }
    
    // optional string directoryPath = 2;
    if (has_directorypath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directorypath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectoryRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDirectoryRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDirectoryRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDirectoryRequestPro::MergeFrom(const ListDirectoryRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_directorypath()) {
      set_directorypath(from.directorypath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDirectoryRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectoryRequestPro::CopyFrom(const ListDirectoryRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectoryRequestPro::IsInitialized() const {
  
  return true;
}

void ListDirectoryRequestPro::Swap(ListDirectoryRequestPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(directorypath_, other->directorypath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDirectoryRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDirectoryRequestPro_descriptor_;
  metadata.reflection = ListDirectoryRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListDirectoryReplyPro::kFileInfoProFieldNumber;
#endif  // !_MSC_VER

ListDirectoryReplyPro::ListDirectoryReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListDirectoryReplyPro::InitAsDefaultInstance() {
}

ListDirectoryReplyPro::ListDirectoryReplyPro(const ListDirectoryReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListDirectoryReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDirectoryReplyPro::~ListDirectoryReplyPro() {
  SharedDtor();
}

void ListDirectoryReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListDirectoryReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectoryReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDirectoryReplyPro_descriptor_;
}

const ListDirectoryReplyPro& ListDirectoryReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ListDirectoryReplyPro* ListDirectoryReplyPro::default_instance_ = NULL;

ListDirectoryReplyPro* ListDirectoryReplyPro::New() const {
  return new ListDirectoryReplyPro;
}

void ListDirectoryReplyPro::Clear() {
  fileinfopro_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDirectoryReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileInfoPro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinfopro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fileInfoPro;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListDirectoryReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinfopro(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListDirectoryReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinfopro(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListDirectoryReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  total_size += 1 * this->fileinfopro_size();
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinfopro(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectoryReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDirectoryReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDirectoryReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDirectoryReplyPro::MergeFrom(const ListDirectoryReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinfopro_.MergeFrom(from.fileinfopro_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDirectoryReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectoryReplyPro::CopyFrom(const ListDirectoryReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectoryReplyPro::IsInitialized() const {
  
  return true;
}

void ListDirectoryReplyPro::Swap(ListDirectoryReplyPro* other) {
  if (other != this) {
    fileinfopro_.Swap(&other->fileinfopro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDirectoryReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDirectoryReplyPro_descriptor_;
  metadata.reflection = ListDirectoryReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileInfoPro::kFileIdFieldNumber;
const int FileInfoPro::kFileSizeFieldNumber;
const int FileInfoPro::kFileNameFieldNumber;
#endif  // !_MSC_VER

FileInfoPro::FileInfoPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileInfoPro::InitAsDefaultInstance() {
}

FileInfoPro::FileInfoPro(const FileInfoPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileInfoPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfoPro::~FileInfoPro() {
  SharedDtor();
}

void FileInfoPro::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void FileInfoPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfoPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfoPro_descriptor_;
}

const FileInfoPro& FileInfoPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

FileInfoPro* FileInfoPro::default_instance_ = NULL;

FileInfoPro* FileInfoPro::New() const {
  return new FileInfoPro;
}

void FileInfoPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    filesize_ = GOOGLE_ULONGLONG(0);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInfoPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }
      
      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInfoPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->filesize(), output);
  }
  
  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileInfoPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->filesize(), target);
  }
  
  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileInfoPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fileSize = 2;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfoPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInfoPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInfoPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInfoPro::MergeFrom(const FileInfoPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInfoPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoPro::CopyFrom(const FileInfoPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoPro::IsInitialized() const {
  
  return true;
}

void FileInfoPro::Swap(FileInfoPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(filesize_, other->filesize_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInfoPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfoPro_descriptor_;
  metadata.reflection = FileInfoPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutObjectInitPro::kObjectIdFieldNumber;
const int PutObjectInitPro::kObjectSizeFieldNumber;
#endif  // !_MSC_VER

PutObjectInitPro::PutObjectInitPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutObjectInitPro::InitAsDefaultInstance() {
}

PutObjectInitPro::PutObjectInitPro(const PutObjectInitPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutObjectInitPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  objectsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutObjectInitPro::~PutObjectInitPro() {
  SharedDtor();
}

void PutObjectInitPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutObjectInitPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutObjectInitPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectInitPro_descriptor_;
}

const PutObjectInitPro& PutObjectInitPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutObjectInitPro* PutObjectInitPro::default_instance_ = NULL;

PutObjectInitPro* PutObjectInitPro::New() const {
  return new PutObjectInitPro;
}

void PutObjectInitPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    objectsize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutObjectInitPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_objectSize;
        break;
      }
      
      // optional fixed32 objectSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_objectSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &objectsize_)));
          set_has_objectsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutObjectInitPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 objectSize = 2;
  if (has_objectsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->objectsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutObjectInitPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 objectSize = 2;
  if (has_objectsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->objectsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutObjectInitPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 objectSize = 2;
    if (has_objectsize()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutObjectInitPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutObjectInitPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutObjectInitPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutObjectInitPro::MergeFrom(const PutObjectInitPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectsize()) {
      set_objectsize(from.objectsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutObjectInitPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjectInitPro::CopyFrom(const PutObjectInitPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjectInitPro::IsInitialized() const {
  
  return true;
}

void PutObjectInitPro::Swap(PutObjectInitPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectsize_, other->objectsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutObjectInitPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutObjectInitPro_descriptor_;
  metadata.reflection = PutObjectInitPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutObjectEndPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

PutObjectEndPro::PutObjectEndPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutObjectEndPro::InitAsDefaultInstance() {
}

PutObjectEndPro::PutObjectEndPro(const PutObjectEndPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutObjectEndPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutObjectEndPro::~PutObjectEndPro() {
  SharedDtor();
}

void PutObjectEndPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutObjectEndPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutObjectEndPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectEndPro_descriptor_;
}

const PutObjectEndPro& PutObjectEndPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutObjectEndPro* PutObjectEndPro::default_instance_ = NULL;

PutObjectEndPro* PutObjectEndPro::New() const {
  return new PutObjectEndPro;
}

void PutObjectEndPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutObjectEndPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutObjectEndPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutObjectEndPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutObjectEndPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutObjectEndPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutObjectEndPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutObjectEndPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutObjectEndPro::MergeFrom(const PutObjectEndPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutObjectEndPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjectEndPro::CopyFrom(const PutObjectEndPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjectEndPro::IsInitialized() const {
  
  return true;
}

void PutObjectEndPro::Swap(PutObjectEndPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutObjectEndPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutObjectEndPro_descriptor_;
  metadata.reflection = PutObjectEndPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectDataPro::kObjectIdFieldNumber;
const int ObjectDataPro::kOffsetFieldNumber;
const int ObjectDataPro::kLengthFieldNumber;
#endif  // !_MSC_VER

ObjectDataPro::ObjectDataPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectDataPro::InitAsDefaultInstance() {
}

ObjectDataPro::ObjectDataPro(const ObjectDataPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectDataPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectDataPro::~ObjectDataPro() {
  SharedDtor();
}

void ObjectDataPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectDataPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDataPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDataPro_descriptor_;
}

const ObjectDataPro& ObjectDataPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ObjectDataPro* ObjectDataPro::default_instance_ = NULL;

ObjectDataPro* ObjectDataPro::New() const {
  return new ObjectDataPro;
}

void ObjectDataPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectDataPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_offset;
        break;
      }
      
      // optional fixed64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectDataPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->offset(), output);
  }
  
  // optional fixed32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectDataPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->offset(), target);
  }
  
  // optional fixed32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectDataPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 offset = 2;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 length = 3;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDataPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectDataPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectDataPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectDataPro::MergeFrom(const ObjectDataPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectDataPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDataPro::CopyFrom(const ObjectDataPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDataPro::IsInitialized() const {
  
  return true;
}

void ObjectDataPro::Swap(ObjectDataPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectDataPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDataPro_descriptor_;
  metadata.reflection = ObjectDataPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentInitPro::kObjectIdFieldNumber;
const int PutSegmentInitPro::kSegmentIdFieldNumber;
const int PutSegmentInitPro::kSegmentSizeFieldNumber;
#endif  // !_MSC_VER

PutSegmentInitPro::PutSegmentInitPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentInitPro::InitAsDefaultInstance() {
}

PutSegmentInitPro::PutSegmentInitPro(const PutSegmentInitPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentInitPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  segmentsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentInitPro::~PutSegmentInitPro() {
  SharedDtor();
}

void PutSegmentInitPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentInitPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentInitPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentInitPro_descriptor_;
}

const PutSegmentInitPro& PutSegmentInitPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentInitPro* PutSegmentInitPro::default_instance_ = NULL;

PutSegmentInitPro* PutSegmentInitPro::New() const {
  return new PutSegmentInitPro;
}

void PutSegmentInitPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
    segmentsize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentInitPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed32 segmentSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentInitPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  // optional fixed32 segmentSize = 3;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->segmentsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentInitPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  // optional fixed32 segmentSize = 3;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->segmentsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentInitPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 segmentSize = 3;
    if (has_segmentsize()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentInitPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentInitPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentInitPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentInitPro::MergeFrom(const PutSegmentInitPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentInitPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentInitPro::CopyFrom(const PutSegmentInitPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentInitPro::IsInitialized() const {
  
  return true;
}

void PutSegmentInitPro::Swap(PutSegmentInitPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentInitPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentInitPro_descriptor_;
  metadata.reflection = PutSegmentInitPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentEndPro::kObjectIdFieldNumber;
const int PutSegmentEndPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

PutSegmentEndPro::PutSegmentEndPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentEndPro::InitAsDefaultInstance() {
}

PutSegmentEndPro::PutSegmentEndPro(const PutSegmentEndPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentEndPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentEndPro::~PutSegmentEndPro() {
  SharedDtor();
}

void PutSegmentEndPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentEndPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentEndPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentEndPro_descriptor_;
}

const PutSegmentEndPro& PutSegmentEndPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentEndPro* PutSegmentEndPro::default_instance_ = NULL;

PutSegmentEndPro* PutSegmentEndPro::New() const {
  return new PutSegmentEndPro;
}

void PutSegmentEndPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentEndPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentEndPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentEndPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentEndPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentEndPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentEndPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentEndPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentEndPro::MergeFrom(const PutSegmentEndPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentEndPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentEndPro::CopyFrom(const PutSegmentEndPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentEndPro::IsInitialized() const {
  
  return true;
}

void PutSegmentEndPro::Swap(PutSegmentEndPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentEndPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentEndPro_descriptor_;
  metadata.reflection = PutSegmentEndPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentDataPro::kObjectIdFieldNumber;
const int SegmentDataPro::kSegmentIdFieldNumber;
const int SegmentDataPro::kOffsetFieldNumber;
const int SegmentDataPro::kLengthFieldNumber;
#endif  // !_MSC_VER

SegmentDataPro::SegmentDataPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentDataPro::InitAsDefaultInstance() {
}

SegmentDataPro::SegmentDataPro(const SegmentDataPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentDataPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentDataPro::~SegmentDataPro() {
  SharedDtor();
}

void SegmentDataPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentDataPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentDataPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentDataPro_descriptor_;
}

const SegmentDataPro& SegmentDataPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentDataPro* SegmentDataPro::default_instance_ = NULL;

SegmentDataPro* SegmentDataPro::New() const {
  return new SegmentDataPro;
}

void SegmentDataPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentDataPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_offset;
        break;
      }
      
      // optional fixed64 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentDataPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  // optional fixed64 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->offset(), output);
  }
  
  // optional fixed32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentDataPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  // optional fixed64 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->offset(), target);
  }
  
  // optional fixed32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentDataPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 offset = 3;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 length = 4;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentDataPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentDataPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentDataPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentDataPro::MergeFrom(const SegmentDataPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentDataPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentDataPro::CopyFrom(const SegmentDataPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentDataPro::IsInitialized() const {
  
  return true;
}

void SegmentDataPro::Swap(SegmentDataPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentDataPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentDataPro_descriptor_;
  metadata.reflection = SegmentDataPro_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ncvfs

// @@protoc_insertion_point(global_scope)
