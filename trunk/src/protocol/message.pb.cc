// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ncvfs {

namespace {

const ::google::protobuf::Descriptor* HandshakeRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeRequestPro_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HandshakeRequestPro_ComponentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HandshakeReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDirectoryRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDirectoryRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadFileRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFileRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutObjectInitRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutObjectInitRequestPro_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PutObjectInitRequestPro_CodingScheme_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectDataPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDataPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectReadyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectReadyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectTransferEndRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectTransferEndRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDirectoryReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDirectoryReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileInfoPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfoPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentLocationPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentLocationPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadFileReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFileReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectInfoReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectInfoReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrimaryListRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrimaryListRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadObjectAckPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadObjectAckPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectInfoRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectInfoRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutObjectInitReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutObjectInitReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectTransferEndReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectTransferEndReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentInitRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentInitRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentDataPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentDataPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentTransferEndRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentTransferEndRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentInitReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentInitReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentTransferEndReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentTransferEndReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSegmentInitRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSegmentInitRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSegmentInitReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSegmentInitReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSegmentReadyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSegmentReadyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdStartupPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdStartupPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdShutdownPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdShutdownPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdStatUpdateReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdStatUpdateReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSecondaryListRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSecondaryListRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdStatUpdateRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdStatUpdateRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSecondaryListReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSecondaryListReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrimaryListReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrimaryListReplyPro_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  HandshakeRequestPro_descriptor_ = file->message_type(0);
  static const int HandshakeRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequestPro, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequestPro, componenttype_),
  };
  HandshakeRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeRequestPro_descriptor_,
      HandshakeRequestPro::default_instance_,
      HandshakeRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeRequestPro));
  HandshakeRequestPro_ComponentType_descriptor_ = HandshakeRequestPro_descriptor_->enum_type(0);
  HandshakeReplyPro_descriptor_ = file->message_type(1);
  static const int HandshakeReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeReplyPro, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeReplyPro, componenttype_),
  };
  HandshakeReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeReplyPro_descriptor_,
      HandshakeReplyPro::default_instance_,
      HandshakeReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeReplyPro));
  ListDirectoryRequestPro_descriptor_ = file->message_type(2);
  static const int ListDirectoryRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, directorypath_),
  };
  ListDirectoryRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDirectoryRequestPro_descriptor_,
      ListDirectoryRequestPro::default_instance_,
      ListDirectoryRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDirectoryRequestPro));
  UploadFileRequestPro_descriptor_ = file->message_type(3);
  static const int UploadFileRequestPro_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, numofobjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, codingsetting_),
  };
  UploadFileRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileRequestPro_descriptor_,
      UploadFileRequestPro::default_instance_,
      UploadFileRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileRequestPro));
  DownloadFileRequestPro_descriptor_ = file->message_type(4);
  static const int DownloadFileRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, fileid_),
  };
  DownloadFileRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFileRequestPro_descriptor_,
      DownloadFileRequestPro::default_instance_,
      DownloadFileRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFileRequestPro));
  PutObjectInitRequestPro_descriptor_ = file->message_type(5);
  static const int PutObjectInitRequestPro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, objectsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, chunkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, codingsetting_),
  };
  PutObjectInitRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutObjectInitRequestPro_descriptor_,
      PutObjectInitRequestPro::default_instance_,
      PutObjectInitRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutObjectInitRequestPro));
  PutObjectInitRequestPro_CodingScheme_descriptor_ = PutObjectInitRequestPro_descriptor_->enum_type(0);
  ObjectDataPro_descriptor_ = file->message_type(6);
  static const int ObjectDataPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, length_),
  };
  ObjectDataPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectDataPro_descriptor_,
      ObjectDataPro::default_instance_,
      ObjectDataPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectDataPro));
  GetObjectRequestPro_descriptor_ = file->message_type(7);
  static const int GetObjectRequestPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectRequestPro, objectid_),
  };
  GetObjectRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectRequestPro_descriptor_,
      GetObjectRequestPro::default_instance_,
      GetObjectRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectRequestPro));
  GetObjectReadyPro_descriptor_ = file->message_type(8);
  static const int GetObjectReadyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectReadyPro, objectid_),
  };
  GetObjectReadyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectReadyPro_descriptor_,
      GetObjectReadyPro::default_instance_,
      GetObjectReadyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectReadyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectReadyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectReadyPro));
  ObjectTransferEndRequestPro_descriptor_ = file->message_type(9);
  static const int ObjectTransferEndRequestPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTransferEndRequestPro, objectid_),
  };
  ObjectTransferEndRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectTransferEndRequestPro_descriptor_,
      ObjectTransferEndRequestPro::default_instance_,
      ObjectTransferEndRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTransferEndRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTransferEndRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectTransferEndRequestPro));
  ListDirectoryReplyPro_descriptor_ = file->message_type(10);
  static const int ListDirectoryReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, fileinfopro_),
  };
  ListDirectoryReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDirectoryReplyPro_descriptor_,
      ListDirectoryReplyPro::default_instance_,
      ListDirectoryReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDirectoryReplyPro));
  FileInfoPro_descriptor_ = file->message_type(11);
  static const int FileInfoPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, filename_),
  };
  FileInfoPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInfoPro_descriptor_,
      FileInfoPro::default_instance_,
      FileInfoPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInfoPro));
  SegmentLocationPro_descriptor_ = file->message_type(12);
  static const int SegmentLocationPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, segmentid_),
  };
  SegmentLocationPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentLocationPro_descriptor_,
      SegmentLocationPro::default_instance_,
      SegmentLocationPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentLocationPro));
  UploadFileReplyPro_descriptor_ = file->message_type(13);
  static const int UploadFileReplyPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, objectlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, primarylist_),
  };
  UploadFileReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileReplyPro_descriptor_,
      UploadFileReplyPro::default_instance_,
      UploadFileReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileReplyPro));
  DownloadFileReplyPro_descriptor_ = file->message_type(14);
  static const int DownloadFileReplyPro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, objectlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, primarylist_),
  };
  DownloadFileReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFileReplyPro_descriptor_,
      DownloadFileReplyPro::default_instance_,
      DownloadFileReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFileReplyPro));
  GetObjectInfoReplyPro_descriptor_ = file->message_type(15);
  static const int GetObjectInfoReplyPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoReplyPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoReplyPro, nodelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoReplyPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoReplyPro, codingsetting_),
  };
  GetObjectInfoReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectInfoReplyPro_descriptor_,
      GetObjectInfoReplyPro::default_instance_,
      GetObjectInfoReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectInfoReplyPro));
  GetPrimaryListRequestPro_descriptor_ = file->message_type(16);
  static const int GetPrimaryListRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListRequestPro, numofobjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListRequestPro, primarylist_),
  };
  GetPrimaryListRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrimaryListRequestPro_descriptor_,
      GetPrimaryListRequestPro::default_instance_,
      GetPrimaryListRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrimaryListRequestPro));
  UploadObjectAckPro_descriptor_ = file->message_type(17);
  static const int UploadObjectAckPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadObjectAckPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadObjectAckPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadObjectAckPro, codingsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadObjectAckPro, nodelist_),
  };
  UploadObjectAckPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadObjectAckPro_descriptor_,
      UploadObjectAckPro::default_instance_,
      UploadObjectAckPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadObjectAckPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadObjectAckPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadObjectAckPro));
  GetObjectInfoRequestPro_descriptor_ = file->message_type(18);
  static const int GetObjectInfoRequestPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoRequestPro, objectid_),
  };
  GetObjectInfoRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectInfoRequestPro_descriptor_,
      GetObjectInfoRequestPro::default_instance_,
      GetObjectInfoRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectInfoRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectInfoRequestPro));
  PutObjectInitReplyPro_descriptor_ = file->message_type(19);
  static const int PutObjectInitReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitReplyPro, objectid_),
  };
  PutObjectInitReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutObjectInitReplyPro_descriptor_,
      PutObjectInitReplyPro::default_instance_,
      PutObjectInitReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutObjectInitReplyPro));
  ObjectTransferEndReplyPro_descriptor_ = file->message_type(20);
  static const int ObjectTransferEndReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTransferEndReplyPro, objectid_),
  };
  ObjectTransferEndReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectTransferEndReplyPro_descriptor_,
      ObjectTransferEndReplyPro::default_instance_,
      ObjectTransferEndReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTransferEndReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTransferEndReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectTransferEndReplyPro));
  GetObjectReplyPro_descriptor_ = file->message_type(21);
  static const int GetObjectReplyPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectReplyPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectReplyPro, objectsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectReplyPro, chunkcount_),
  };
  GetObjectReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectReplyPro_descriptor_,
      GetObjectReplyPro::default_instance_,
      GetObjectReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectReplyPro));
  PutSegmentInitRequestPro_descriptor_ = file->message_type(22);
  static const int PutSegmentInitRequestPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, segmentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, chunkcount_),
  };
  PutSegmentInitRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentInitRequestPro_descriptor_,
      PutSegmentInitRequestPro::default_instance_,
      PutSegmentInitRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentInitRequestPro));
  SegmentDataPro_descriptor_ = file->message_type(23);
  static const int SegmentDataPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, length_),
  };
  SegmentDataPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentDataPro_descriptor_,
      SegmentDataPro::default_instance_,
      SegmentDataPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentDataPro));
  SegmentTransferEndRequestPro_descriptor_ = file->message_type(24);
  static const int SegmentTransferEndRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, segmentid_),
  };
  SegmentTransferEndRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentTransferEndRequestPro_descriptor_,
      SegmentTransferEndRequestPro::default_instance_,
      SegmentTransferEndRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentTransferEndRequestPro));
  PutSegmentInitReplyPro_descriptor_ = file->message_type(25);
  static const int PutSegmentInitReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, segmentid_),
  };
  PutSegmentInitReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentInitReplyPro_descriptor_,
      PutSegmentInitReplyPro::default_instance_,
      PutSegmentInitReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentInitReplyPro));
  SegmentTransferEndReplyPro_descriptor_ = file->message_type(26);
  static const int SegmentTransferEndReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndReplyPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndReplyPro, segmentid_),
  };
  SegmentTransferEndReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentTransferEndReplyPro_descriptor_,
      SegmentTransferEndReplyPro::default_instance_,
      SegmentTransferEndReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentTransferEndReplyPro));
  GetSegmentInitRequestPro_descriptor_ = file->message_type(27);
  static const int GetSegmentInitRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitRequestPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitRequestPro, segmentid_),
  };
  GetSegmentInitRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSegmentInitRequestPro_descriptor_,
      GetSegmentInitRequestPro::default_instance_,
      GetSegmentInitRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSegmentInitRequestPro));
  GetSegmentInitReplyPro_descriptor_ = file->message_type(28);
  static const int GetSegmentInitReplyPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitReplyPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitReplyPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitReplyPro, segmentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitReplyPro, chunkcount_),
  };
  GetSegmentInitReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSegmentInitReplyPro_descriptor_,
      GetSegmentInitReplyPro::default_instance_,
      GetSegmentInitReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInitReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSegmentInitReplyPro));
  GetSegmentReadyPro_descriptor_ = file->message_type(29);
  static const int GetSegmentReadyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentReadyPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentReadyPro, segmentid_),
  };
  GetSegmentReadyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSegmentReadyPro_descriptor_,
      GetSegmentReadyPro::default_instance_,
      GetSegmentReadyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentReadyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentReadyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSegmentReadyPro));
  OsdStartupPro_descriptor_ = file->message_type(30);
  static const int OsdStartupPro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdloading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdport_),
  };
  OsdStartupPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdStartupPro_descriptor_,
      OsdStartupPro::default_instance_,
      OsdStartupPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdStartupPro));
  OsdShutdownPro_descriptor_ = file->message_type(31);
  static const int OsdShutdownPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdShutdownPro, osdid_),
  };
  OsdShutdownPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdShutdownPro_descriptor_,
      OsdShutdownPro::default_instance_,
      OsdShutdownPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdShutdownPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdShutdownPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdShutdownPro));
  OsdStatUpdateReplyPro_descriptor_ = file->message_type(32);
  static const int OsdStatUpdateReplyPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, osdcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, osdloading_),
  };
  OsdStatUpdateReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdStatUpdateReplyPro_descriptor_,
      OsdStatUpdateReplyPro::default_instance_,
      OsdStatUpdateReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdStatUpdateReplyPro));
  GetSecondaryListRequestPro_descriptor_ = file->message_type(33);
  static const int GetSecondaryListRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, numofsegs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, secondarylist_),
  };
  GetSecondaryListRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSecondaryListRequestPro_descriptor_,
      GetSecondaryListRequestPro::default_instance_,
      GetSecondaryListRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSecondaryListRequestPro));
  OsdStatUpdateRequestPro_descriptor_ = file->message_type(34);
  static const int OsdStatUpdateRequestPro_offsets_[1] = {
  };
  OsdStatUpdateRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdStatUpdateRequestPro_descriptor_,
      OsdStatUpdateRequestPro::default_instance_,
      OsdStatUpdateRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdStatUpdateRequestPro));
  GetSecondaryListReplyPro_descriptor_ = file->message_type(35);
  static const int GetSecondaryListReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListReplyPro, secondarylist_),
  };
  GetSecondaryListReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSecondaryListReplyPro_descriptor_,
      GetSecondaryListReplyPro::default_instance_,
      GetSecondaryListReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSecondaryListReplyPro));
  GetPrimaryListReplyPro_descriptor_ = file->message_type(36);
  static const int GetPrimaryListReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListReplyPro, primarylist_),
  };
  GetPrimaryListReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrimaryListReplyPro_descriptor_,
      GetPrimaryListReplyPro::default_instance_,
      GetPrimaryListReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrimaryListReplyPro));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeRequestPro_descriptor_, &HandshakeRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeReplyPro_descriptor_, &HandshakeReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDirectoryRequestPro_descriptor_, &ListDirectoryRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileRequestPro_descriptor_, &UploadFileRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFileRequestPro_descriptor_, &DownloadFileRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutObjectInitRequestPro_descriptor_, &PutObjectInitRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectDataPro_descriptor_, &ObjectDataPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectRequestPro_descriptor_, &GetObjectRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectReadyPro_descriptor_, &GetObjectReadyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectTransferEndRequestPro_descriptor_, &ObjectTransferEndRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDirectoryReplyPro_descriptor_, &ListDirectoryReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInfoPro_descriptor_, &FileInfoPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentLocationPro_descriptor_, &SegmentLocationPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileReplyPro_descriptor_, &UploadFileReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFileReplyPro_descriptor_, &DownloadFileReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectInfoReplyPro_descriptor_, &GetObjectInfoReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrimaryListRequestPro_descriptor_, &GetPrimaryListRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadObjectAckPro_descriptor_, &UploadObjectAckPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectInfoRequestPro_descriptor_, &GetObjectInfoRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutObjectInitReplyPro_descriptor_, &PutObjectInitReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectTransferEndReplyPro_descriptor_, &ObjectTransferEndReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectReplyPro_descriptor_, &GetObjectReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentInitRequestPro_descriptor_, &PutSegmentInitRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentDataPro_descriptor_, &SegmentDataPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentTransferEndRequestPro_descriptor_, &SegmentTransferEndRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentInitReplyPro_descriptor_, &PutSegmentInitReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentTransferEndReplyPro_descriptor_, &SegmentTransferEndReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSegmentInitRequestPro_descriptor_, &GetSegmentInitRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSegmentInitReplyPro_descriptor_, &GetSegmentInitReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSegmentReadyPro_descriptor_, &GetSegmentReadyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdStartupPro_descriptor_, &OsdStartupPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdShutdownPro_descriptor_, &OsdShutdownPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdStatUpdateReplyPro_descriptor_, &OsdStatUpdateReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSecondaryListRequestPro_descriptor_, &GetSecondaryListRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdStatUpdateRequestPro_descriptor_, &OsdStatUpdateRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSecondaryListReplyPro_descriptor_, &GetSecondaryListReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrimaryListReplyPro_descriptor_, &GetPrimaryListReplyPro::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete HandshakeRequestPro::default_instance_;
  delete HandshakeRequestPro_reflection_;
  delete HandshakeReplyPro::default_instance_;
  delete HandshakeReplyPro_reflection_;
  delete ListDirectoryRequestPro::default_instance_;
  delete ListDirectoryRequestPro_reflection_;
  delete UploadFileRequestPro::default_instance_;
  delete UploadFileRequestPro_reflection_;
  delete DownloadFileRequestPro::default_instance_;
  delete DownloadFileRequestPro_reflection_;
  delete PutObjectInitRequestPro::default_instance_;
  delete PutObjectInitRequestPro_reflection_;
  delete ObjectDataPro::default_instance_;
  delete ObjectDataPro_reflection_;
  delete GetObjectRequestPro::default_instance_;
  delete GetObjectRequestPro_reflection_;
  delete GetObjectReadyPro::default_instance_;
  delete GetObjectReadyPro_reflection_;
  delete ObjectTransferEndRequestPro::default_instance_;
  delete ObjectTransferEndRequestPro_reflection_;
  delete ListDirectoryReplyPro::default_instance_;
  delete ListDirectoryReplyPro_reflection_;
  delete FileInfoPro::default_instance_;
  delete FileInfoPro_reflection_;
  delete SegmentLocationPro::default_instance_;
  delete SegmentLocationPro_reflection_;
  delete UploadFileReplyPro::default_instance_;
  delete UploadFileReplyPro_reflection_;
  delete DownloadFileReplyPro::default_instance_;
  delete DownloadFileReplyPro_reflection_;
  delete GetObjectInfoReplyPro::default_instance_;
  delete GetObjectInfoReplyPro_reflection_;
  delete GetPrimaryListRequestPro::default_instance_;
  delete GetPrimaryListRequestPro_reflection_;
  delete UploadObjectAckPro::default_instance_;
  delete UploadObjectAckPro_reflection_;
  delete GetObjectInfoRequestPro::default_instance_;
  delete GetObjectInfoRequestPro_reflection_;
  delete PutObjectInitReplyPro::default_instance_;
  delete PutObjectInitReplyPro_reflection_;
  delete ObjectTransferEndReplyPro::default_instance_;
  delete ObjectTransferEndReplyPro_reflection_;
  delete GetObjectReplyPro::default_instance_;
  delete GetObjectReplyPro_reflection_;
  delete PutSegmentInitRequestPro::default_instance_;
  delete PutSegmentInitRequestPro_reflection_;
  delete SegmentDataPro::default_instance_;
  delete SegmentDataPro_reflection_;
  delete SegmentTransferEndRequestPro::default_instance_;
  delete SegmentTransferEndRequestPro_reflection_;
  delete PutSegmentInitReplyPro::default_instance_;
  delete PutSegmentInitReplyPro_reflection_;
  delete SegmentTransferEndReplyPro::default_instance_;
  delete SegmentTransferEndReplyPro_reflection_;
  delete GetSegmentInitRequestPro::default_instance_;
  delete GetSegmentInitRequestPro_reflection_;
  delete GetSegmentInitReplyPro::default_instance_;
  delete GetSegmentInitReplyPro_reflection_;
  delete GetSegmentReadyPro::default_instance_;
  delete GetSegmentReadyPro_reflection_;
  delete OsdStartupPro::default_instance_;
  delete OsdStartupPro_reflection_;
  delete OsdShutdownPro::default_instance_;
  delete OsdShutdownPro_reflection_;
  delete OsdStatUpdateReplyPro::default_instance_;
  delete OsdStatUpdateReplyPro_reflection_;
  delete GetSecondaryListRequestPro::default_instance_;
  delete GetSecondaryListRequestPro_reflection_;
  delete OsdStatUpdateRequestPro::default_instance_;
  delete OsdStatUpdateRequestPro_reflection_;
  delete GetSecondaryListReplyPro::default_instance_;
  delete GetSecondaryListReplyPro_reflection_;
  delete GetPrimaryListReplyPro::default_instance_;
  delete GetPrimaryListReplyPro_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\005ncvfs\"\247\001\n\023HandshakeRequ"
    "estPro\022\023\n\013componentId\030\001 \001(\007\022\?\n\rcomponent"
    "Type\030\002 \001(\0162(.ncvfs.HandshakeRequestPro.C"
    "omponentType\":\n\rComponentType\022\n\n\006CLIENT\020"
    "\001\022\007\n\003OSD\020\002\022\007\n\003MDS\020\003\022\013\n\007MONITOR\020\004\"i\n\021Hand"
    "shakeReplyPro\022\023\n\013componentId\030\001 \001(\007\022\?\n\rco"
    "mponentType\030\002 \001(\0162(.ncvfs.HandshakeReque"
    "stPro.ComponentType\"\?\n\027ListDirectoryRequ"
    "estPro\022\r\n\005osdId\030\001 \001(\007\022\025\n\rdirectoryPath\030\002"
    " \001(\t\"\265\001\n\024UploadFileRequestPro\022\020\n\010clientI"
    "d\030\001 \001(\007\022\020\n\010fileSize\030\002 \001(\006\022\021\n\tnumOfObjs\030\003"
    " \001(\007\022\014\n\004path\030\004 \001(\t\022A\n\014codingScheme\030\005 \001(\016"
    "2+.ncvfs.PutObjectInitRequestPro.CodingS"
    "cheme\022\025\n\rcodingSetting\030\006 \001(\t\":\n\026Download"
    "FileRequestPro\022\020\n\010clientId\030\001 \001(\007\022\016\n\006file"
    "Id\030\002 \001(\007\"\341\001\n\027PutObjectInitRequestPro\022\020\n\010"
    "objectId\030\001 \001(\006\022\022\n\nobjectSize\030\002 \001(\007\022\022\n\nch"
    "unkCount\030\003 \001(\007\022A\n\014codingScheme\030\004 \001(\0162+.n"
    "cvfs.PutObjectInitRequestPro.CodingSchem"
    "e\022\025\n\rcodingSetting\030\005 \001(\t\"2\n\014CodingScheme"
    "\022\020\n\014RAID0_CODING\020\001\022\020\n\014RAID1_CODING\020\002\"A\n\r"
    "ObjectDataPro\022\020\n\010objectId\030\001 \001(\006\022\016\n\006offse"
    "t\030\002 \001(\006\022\016\n\006length\030\003 \001(\007\"\'\n\023GetObjectRequ"
    "estPro\022\020\n\010objectId\030\001 \001(\006\"%\n\021GetObjectRea"
    "dyPro\022\020\n\010objectId\030\001 \001(\006\"/\n\033ObjectTransfe"
    "rEndRequestPro\022\020\n\010objectId\030\001 \001(\006\"@\n\025List"
    "DirectoryReplyPro\022\'\n\013fileInfoPro\030\001 \003(\0132\022"
    ".ncvfs.FileInfoPro\"A\n\013FileInfoPro\022\016\n\006fil"
    "eId\030\001 \001(\007\022\020\n\010fileSize\030\002 \001(\006\022\020\n\010fileName\030"
    "\003 \001(\t\"6\n\022SegmentLocationPro\022\r\n\005osdId\030\001 \001"
    "(\007\022\021\n\tsegmentId\030\002 \001(\007\"M\n\022UploadFileReply"
    "Pro\022\016\n\006fileId\030\001 \001(\007\022\022\n\nobjectList\030\002 \003(\006\022"
    "\023\n\013primaryList\030\003 \003(\007\"s\n\024DownloadFileRepl"
    "yPro\022\016\n\006fileId\030\001 \001(\007\022\020\n\010fileSize\030\002 \001(\006\022\020"
    "\n\010checksum\030\003 \001(\t\022\022\n\nobjectList\030\004 \003(\006\022\023\n\013"
    "primaryList\030\005 \003(\007\"\225\001\n\025GetObjectInfoReply"
    "Pro\022\020\n\010objectId\030\001 \001(\006\022\020\n\010nodeList\030\002 \003(\007\022"
    "A\n\014codingScheme\030\003 \001(\0162+.ncvfs.PutObjectI"
    "nitRequestPro.CodingScheme\022\025\n\rcodingSett"
    "ing\030\004 \001(\t\"B\n\030GetPrimaryListRequestPro\022\021\n"
    "\tnumOfObjs\030\001 \001(\007\022\023\n\013primaryList\030\002 \003(\007\"\222\001"
    "\n\022UploadObjectAckPro\022\020\n\010objectId\030\001 \001(\006\022A"
    "\n\014codingScheme\030\002 \001(\0162+.ncvfs.PutObjectIn"
    "itRequestPro.CodingScheme\022\025\n\rcodingSetti"
    "ng\030\003 \001(\t\022\020\n\010nodeList\030\004 \003(\007\"+\n\027GetObjectI"
    "nfoRequestPro\022\020\n\010objectId\030\001 \001(\006\")\n\025PutOb"
    "jectInitReplyPro\022\020\n\010objectId\030\001 \001(\006\"-\n\031Ob"
    "jectTransferEndReplyPro\022\020\n\010objectId\030\001 \001("
    "\006\"M\n\021GetObjectReplyPro\022\020\n\010objectId\030\001 \001(\006"
    "\022\022\n\nobjectSize\030\002 \001(\007\022\022\n\nchunkCount\030\003 \001(\007"
    "\"h\n\030PutSegmentInitRequestPro\022\020\n\010objectId"
    "\030\001 \001(\006\022\021\n\tsegmentId\030\002 \001(\007\022\023\n\013segmentSize"
    "\030\003 \001(\007\022\022\n\nchunkCount\030\004 \001(\007\"U\n\016SegmentDat"
    "aPro\022\020\n\010objectId\030\001 \001(\006\022\021\n\tsegmentId\030\002 \001("
    "\007\022\016\n\006offset\030\003 \001(\006\022\016\n\006length\030\004 \001(\007\"C\n\034Seg"
    "mentTransferEndRequestPro\022\020\n\010objectId\030\001 "
    "\001(\006\022\021\n\tsegmentId\030\002 \001(\007\"=\n\026PutSegmentInit"
    "ReplyPro\022\020\n\010objectId\030\001 \001(\006\022\021\n\tsegmentId\030"
    "\002 \001(\007\"A\n\032SegmentTransferEndReplyPro\022\020\n\010o"
    "bjectId\030\001 \001(\006\022\021\n\tsegmentId\030\002 \001(\007\"\?\n\030GetS"
    "egmentInitRequestPro\022\020\n\010objectId\030\001 \001(\006\022\021"
    "\n\tsegmentId\030\002 \001(\007\"f\n\026GetSegmentInitReply"
    "Pro\022\020\n\010objectId\030\001 \001(\006\022\021\n\tsegmentId\030\002 \001(\007"
    "\022\023\n\013segmentSize\030\003 \001(\007\022\022\n\nchunkCount\030\004 \001("
    "\007\"9\n\022GetSegmentReadyPro\022\020\n\010objectId\030\001 \001("
    "\006\022\021\n\tsegmentId\030\002 \001(\007\"g\n\rOsdStartupPro\022\r\n"
    "\005osdId\030\001 \001(\007\022\023\n\013osdCapacity\030\002 \001(\007\022\022\n\nosd"
    "Loading\030\003 \001(\007\022\r\n\005osdIp\030\004 \001(\007\022\017\n\007osdPort\030"
    "\005 \001(\007\"\037\n\016OsdShutdownPro\022\r\n\005osdId\030\001 \001(\007\"O"
    "\n\025OsdStatUpdateReplyPro\022\r\n\005osdId\030\001 \001(\007\022\023"
    "\n\013osdCapacity\030\002 \001(\007\022\022\n\nosdLoading\030\003 \001(\007\""
    "a\n\032GetSecondaryListRequestPro\022\021\n\tnumOfSe"
    "gs\030\001 \001(\007\0220\n\rsecondaryList\030\002 \003(\0132\031.ncvfs."
    "SegmentLocationPro\"\031\n\027OsdStatUpdateReque"
    "stPro\"L\n\030GetSecondaryListReplyPro\0220\n\rsec"
    "ondaryList\030\001 \003(\0132\031.ncvfs.SegmentLocation"
    "Pro\"-\n\026GetPrimaryListReplyPro\022\023\n\013primary"
    "List\030\001 \003(\007", 3090);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  HandshakeRequestPro::default_instance_ = new HandshakeRequestPro();
  HandshakeReplyPro::default_instance_ = new HandshakeReplyPro();
  ListDirectoryRequestPro::default_instance_ = new ListDirectoryRequestPro();
  UploadFileRequestPro::default_instance_ = new UploadFileRequestPro();
  DownloadFileRequestPro::default_instance_ = new DownloadFileRequestPro();
  PutObjectInitRequestPro::default_instance_ = new PutObjectInitRequestPro();
  ObjectDataPro::default_instance_ = new ObjectDataPro();
  GetObjectRequestPro::default_instance_ = new GetObjectRequestPro();
  GetObjectReadyPro::default_instance_ = new GetObjectReadyPro();
  ObjectTransferEndRequestPro::default_instance_ = new ObjectTransferEndRequestPro();
  ListDirectoryReplyPro::default_instance_ = new ListDirectoryReplyPro();
  FileInfoPro::default_instance_ = new FileInfoPro();
  SegmentLocationPro::default_instance_ = new SegmentLocationPro();
  UploadFileReplyPro::default_instance_ = new UploadFileReplyPro();
  DownloadFileReplyPro::default_instance_ = new DownloadFileReplyPro();
  GetObjectInfoReplyPro::default_instance_ = new GetObjectInfoReplyPro();
  GetPrimaryListRequestPro::default_instance_ = new GetPrimaryListRequestPro();
  UploadObjectAckPro::default_instance_ = new UploadObjectAckPro();
  GetObjectInfoRequestPro::default_instance_ = new GetObjectInfoRequestPro();
  PutObjectInitReplyPro::default_instance_ = new PutObjectInitReplyPro();
  ObjectTransferEndReplyPro::default_instance_ = new ObjectTransferEndReplyPro();
  GetObjectReplyPro::default_instance_ = new GetObjectReplyPro();
  PutSegmentInitRequestPro::default_instance_ = new PutSegmentInitRequestPro();
  SegmentDataPro::default_instance_ = new SegmentDataPro();
  SegmentTransferEndRequestPro::default_instance_ = new SegmentTransferEndRequestPro();
  PutSegmentInitReplyPro::default_instance_ = new PutSegmentInitReplyPro();
  SegmentTransferEndReplyPro::default_instance_ = new SegmentTransferEndReplyPro();
  GetSegmentInitRequestPro::default_instance_ = new GetSegmentInitRequestPro();
  GetSegmentInitReplyPro::default_instance_ = new GetSegmentInitReplyPro();
  GetSegmentReadyPro::default_instance_ = new GetSegmentReadyPro();
  OsdStartupPro::default_instance_ = new OsdStartupPro();
  OsdShutdownPro::default_instance_ = new OsdShutdownPro();
  OsdStatUpdateReplyPro::default_instance_ = new OsdStatUpdateReplyPro();
  GetSecondaryListRequestPro::default_instance_ = new GetSecondaryListRequestPro();
  OsdStatUpdateRequestPro::default_instance_ = new OsdStatUpdateRequestPro();
  GetSecondaryListReplyPro::default_instance_ = new GetSecondaryListReplyPro();
  GetPrimaryListReplyPro::default_instance_ = new GetPrimaryListReplyPro();
  HandshakeRequestPro::default_instance_->InitAsDefaultInstance();
  HandshakeReplyPro::default_instance_->InitAsDefaultInstance();
  ListDirectoryRequestPro::default_instance_->InitAsDefaultInstance();
  UploadFileRequestPro::default_instance_->InitAsDefaultInstance();
  DownloadFileRequestPro::default_instance_->InitAsDefaultInstance();
  PutObjectInitRequestPro::default_instance_->InitAsDefaultInstance();
  ObjectDataPro::default_instance_->InitAsDefaultInstance();
  GetObjectRequestPro::default_instance_->InitAsDefaultInstance();
  GetObjectReadyPro::default_instance_->InitAsDefaultInstance();
  ObjectTransferEndRequestPro::default_instance_->InitAsDefaultInstance();
  ListDirectoryReplyPro::default_instance_->InitAsDefaultInstance();
  FileInfoPro::default_instance_->InitAsDefaultInstance();
  SegmentLocationPro::default_instance_->InitAsDefaultInstance();
  UploadFileReplyPro::default_instance_->InitAsDefaultInstance();
  DownloadFileReplyPro::default_instance_->InitAsDefaultInstance();
  GetObjectInfoReplyPro::default_instance_->InitAsDefaultInstance();
  GetPrimaryListRequestPro::default_instance_->InitAsDefaultInstance();
  UploadObjectAckPro::default_instance_->InitAsDefaultInstance();
  GetObjectInfoRequestPro::default_instance_->InitAsDefaultInstance();
  PutObjectInitReplyPro::default_instance_->InitAsDefaultInstance();
  ObjectTransferEndReplyPro::default_instance_->InitAsDefaultInstance();
  GetObjectReplyPro::default_instance_->InitAsDefaultInstance();
  PutSegmentInitRequestPro::default_instance_->InitAsDefaultInstance();
  SegmentDataPro::default_instance_->InitAsDefaultInstance();
  SegmentTransferEndRequestPro::default_instance_->InitAsDefaultInstance();
  PutSegmentInitReplyPro::default_instance_->InitAsDefaultInstance();
  SegmentTransferEndReplyPro::default_instance_->InitAsDefaultInstance();
  GetSegmentInitRequestPro::default_instance_->InitAsDefaultInstance();
  GetSegmentInitReplyPro::default_instance_->InitAsDefaultInstance();
  GetSegmentReadyPro::default_instance_->InitAsDefaultInstance();
  OsdStartupPro::default_instance_->InitAsDefaultInstance();
  OsdShutdownPro::default_instance_->InitAsDefaultInstance();
  OsdStatUpdateReplyPro::default_instance_->InitAsDefaultInstance();
  GetSecondaryListRequestPro::default_instance_->InitAsDefaultInstance();
  OsdStatUpdateRequestPro::default_instance_->InitAsDefaultInstance();
  GetSecondaryListReplyPro::default_instance_->InitAsDefaultInstance();
  GetPrimaryListReplyPro::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* HandshakeRequestPro_ComponentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeRequestPro_ComponentType_descriptor_;
}
bool HandshakeRequestPro_ComponentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HandshakeRequestPro_ComponentType HandshakeRequestPro::CLIENT;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::OSD;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::MDS;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::MONITOR;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::ComponentType_MIN;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::ComponentType_MAX;
const int HandshakeRequestPro::ComponentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HandshakeRequestPro::kComponentIdFieldNumber;
const int HandshakeRequestPro::kComponentTypeFieldNumber;
#endif  // !_MSC_VER

HandshakeRequestPro::HandshakeRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeRequestPro::InitAsDefaultInstance() {
}

HandshakeRequestPro::HandshakeRequestPro(const HandshakeRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeRequestPro::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = 0u;
  componenttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeRequestPro::~HandshakeRequestPro() {
  SharedDtor();
}

void HandshakeRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandshakeRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeRequestPro_descriptor_;
}

const HandshakeRequestPro& HandshakeRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HandshakeRequestPro* HandshakeRequestPro::default_instance_ = NULL;

HandshakeRequestPro* HandshakeRequestPro::New() const {
  return new HandshakeRequestPro;
}

void HandshakeRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    componentid_ = 0u;
    componenttype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 componentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &componentid_)));
          set_has_componentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_componentType;
        break;
      }
      
      // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_componentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::HandshakeRequestPro_ComponentType_IsValid(value)) {
            set_componenttype(static_cast< ::ncvfs::HandshakeRequestPro_ComponentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 componentId = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->componentid(), output);
  }
  
  // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
  if (has_componenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->componenttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 componentId = 1;
  if (has_componentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->componentid(), target);
  }
  
  // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
  if (has_componenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->componenttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 componentId = 1;
    if (has_componentid()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
    if (has_componenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->componenttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeRequestPro::MergeFrom(const HandshakeRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_componenttype()) {
      set_componenttype(from.componenttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeRequestPro::CopyFrom(const HandshakeRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeRequestPro::IsInitialized() const {
  
  return true;
}

void HandshakeRequestPro::Swap(HandshakeRequestPro* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(componenttype_, other->componenttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeRequestPro_descriptor_;
  metadata.reflection = HandshakeRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandshakeReplyPro::kComponentIdFieldNumber;
const int HandshakeReplyPro::kComponentTypeFieldNumber;
#endif  // !_MSC_VER

HandshakeReplyPro::HandshakeReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeReplyPro::InitAsDefaultInstance() {
}

HandshakeReplyPro::HandshakeReplyPro(const HandshakeReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeReplyPro::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = 0u;
  componenttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeReplyPro::~HandshakeReplyPro() {
  SharedDtor();
}

void HandshakeReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandshakeReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeReplyPro_descriptor_;
}

const HandshakeReplyPro& HandshakeReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HandshakeReplyPro* HandshakeReplyPro::default_instance_ = NULL;

HandshakeReplyPro* HandshakeReplyPro::New() const {
  return new HandshakeReplyPro;
}

void HandshakeReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    componentid_ = 0u;
    componenttype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 componentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &componentid_)));
          set_has_componentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_componentType;
        break;
      }
      
      // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_componentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::HandshakeRequestPro_ComponentType_IsValid(value)) {
            set_componenttype(static_cast< ::ncvfs::HandshakeRequestPro_ComponentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 componentId = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->componentid(), output);
  }
  
  // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
  if (has_componenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->componenttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 componentId = 1;
  if (has_componentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->componentid(), target);
  }
  
  // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
  if (has_componenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->componenttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 componentId = 1;
    if (has_componentid()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
    if (has_componenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->componenttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeReplyPro::MergeFrom(const HandshakeReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_componenttype()) {
      set_componenttype(from.componenttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeReplyPro::CopyFrom(const HandshakeReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeReplyPro::IsInitialized() const {
  
  return true;
}

void HandshakeReplyPro::Swap(HandshakeReplyPro* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(componenttype_, other->componenttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeReplyPro_descriptor_;
  metadata.reflection = HandshakeReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListDirectoryRequestPro::kOsdIdFieldNumber;
const int ListDirectoryRequestPro::kDirectoryPathFieldNumber;
#endif  // !_MSC_VER

ListDirectoryRequestPro::ListDirectoryRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListDirectoryRequestPro::InitAsDefaultInstance() {
}

ListDirectoryRequestPro::ListDirectoryRequestPro(const ListDirectoryRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListDirectoryRequestPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  directorypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDirectoryRequestPro::~ListDirectoryRequestPro() {
  SharedDtor();
}

void ListDirectoryRequestPro::SharedDtor() {
  if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
    delete directorypath_;
  }
  if (this != default_instance_) {
  }
}

void ListDirectoryRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectoryRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDirectoryRequestPro_descriptor_;
}

const ListDirectoryRequestPro& ListDirectoryRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ListDirectoryRequestPro* ListDirectoryRequestPro::default_instance_ = NULL;

ListDirectoryRequestPro* ListDirectoryRequestPro::New() const {
  return new ListDirectoryRequestPro;
}

void ListDirectoryRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    if (has_directorypath()) {
      if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
        directorypath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDirectoryRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_directoryPath;
        break;
      }
      
      // optional string directoryPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directoryPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directorypath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directorypath().data(), this->directorypath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListDirectoryRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional string directoryPath = 2;
  if (has_directorypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directorypath().data(), this->directorypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->directorypath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListDirectoryRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional string directoryPath = 2;
  if (has_directorypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directorypath().data(), this->directorypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directorypath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListDirectoryRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional string directoryPath = 2;
    if (has_directorypath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directorypath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectoryRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDirectoryRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDirectoryRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDirectoryRequestPro::MergeFrom(const ListDirectoryRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_directorypath()) {
      set_directorypath(from.directorypath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDirectoryRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectoryRequestPro::CopyFrom(const ListDirectoryRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectoryRequestPro::IsInitialized() const {
  
  return true;
}

void ListDirectoryRequestPro::Swap(ListDirectoryRequestPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(directorypath_, other->directorypath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDirectoryRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDirectoryRequestPro_descriptor_;
  metadata.reflection = ListDirectoryRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileRequestPro::kClientIdFieldNumber;
const int UploadFileRequestPro::kFileSizeFieldNumber;
const int UploadFileRequestPro::kNumOfObjsFieldNumber;
const int UploadFileRequestPro::kPathFieldNumber;
const int UploadFileRequestPro::kCodingSchemeFieldNumber;
const int UploadFileRequestPro::kCodingSettingFieldNumber;
#endif  // !_MSC_VER

UploadFileRequestPro::UploadFileRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileRequestPro::InitAsDefaultInstance() {
}

UploadFileRequestPro::UploadFileRequestPro(const UploadFileRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  numofobjs_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileRequestPro::~UploadFileRequestPro() {
  SharedDtor();
}

void UploadFileRequestPro::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (this != default_instance_) {
  }
}

void UploadFileRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileRequestPro_descriptor_;
}

const UploadFileRequestPro& UploadFileRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadFileRequestPro* UploadFileRequestPro::default_instance_ = NULL;

UploadFileRequestPro* UploadFileRequestPro::New() const {
  return new UploadFileRequestPro;
}

void UploadFileRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    filesize_ = GOOGLE_ULONGLONG(0);
    numofobjs_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_numOfObjs;
        break;
      }
      
      // optional fixed32 numOfObjs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_numOfObjs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofobjs_)));
          set_has_numofobjs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }
      
      // optional string path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutObjectInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutObjectInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->filesize(), output);
  }
  
  // optional fixed32 numOfObjs = 3;
  if (has_numofobjs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->numofobjs(), output);
  }
  
  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->path(), output);
  }
  
  // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 5;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 6;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->codingsetting(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->filesize(), target);
  }
  
  // optional fixed32 numOfObjs = 3;
  if (has_numofobjs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->numofobjs(), target);
  }
  
  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }
  
  // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 5;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 6;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->codingsetting(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fileSize = 2;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 numOfObjs = 3;
    if (has_numofobjs()) {
      total_size += 1 + 4;
    }
    
    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 5;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 6;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileRequestPro::MergeFrom(const UploadFileRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_numofobjs()) {
      set_numofobjs(from.numofobjs());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileRequestPro::CopyFrom(const UploadFileRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileRequestPro::IsInitialized() const {
  
  return true;
}

void UploadFileRequestPro::Swap(UploadFileRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(filesize_, other->filesize_);
    std::swap(numofobjs_, other->numofobjs_);
    std::swap(path_, other->path_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileRequestPro_descriptor_;
  metadata.reflection = UploadFileRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadFileRequestPro::kClientIdFieldNumber;
const int DownloadFileRequestPro::kFileIdFieldNumber;
#endif  // !_MSC_VER

DownloadFileRequestPro::DownloadFileRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadFileRequestPro::InitAsDefaultInstance() {
}

DownloadFileRequestPro::DownloadFileRequestPro(const DownloadFileRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadFileRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  fileid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFileRequestPro::~DownloadFileRequestPro() {
  SharedDtor();
}

void DownloadFileRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadFileRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFileRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFileRequestPro_descriptor_;
}

const DownloadFileRequestPro& DownloadFileRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

DownloadFileRequestPro* DownloadFileRequestPro::default_instance_ = NULL;

DownloadFileRequestPro* DownloadFileRequestPro::New() const {
  return new DownloadFileRequestPro;
}

void DownloadFileRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    fileid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFileRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fileId;
        break;
      }
      
      // optional fixed32 fileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadFileRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->fileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadFileRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->fileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadFileRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 fileId = 2;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFileRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFileRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFileRequestPro::MergeFrom(const DownloadFileRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFileRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFileRequestPro::CopyFrom(const DownloadFileRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileRequestPro::IsInitialized() const {
  
  return true;
}

void DownloadFileRequestPro::Swap(DownloadFileRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(fileid_, other->fileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFileRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFileRequestPro_descriptor_;
  metadata.reflection = DownloadFileRequestPro_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PutObjectInitRequestPro_CodingScheme_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectInitRequestPro_CodingScheme_descriptor_;
}
bool PutObjectInitRequestPro_CodingScheme_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PutObjectInitRequestPro_CodingScheme PutObjectInitRequestPro::RAID0_CODING;
const PutObjectInitRequestPro_CodingScheme PutObjectInitRequestPro::RAID1_CODING;
const PutObjectInitRequestPro_CodingScheme PutObjectInitRequestPro::CodingScheme_MIN;
const PutObjectInitRequestPro_CodingScheme PutObjectInitRequestPro::CodingScheme_MAX;
const int PutObjectInitRequestPro::CodingScheme_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PutObjectInitRequestPro::kObjectIdFieldNumber;
const int PutObjectInitRequestPro::kObjectSizeFieldNumber;
const int PutObjectInitRequestPro::kChunkCountFieldNumber;
const int PutObjectInitRequestPro::kCodingSchemeFieldNumber;
const int PutObjectInitRequestPro::kCodingSettingFieldNumber;
#endif  // !_MSC_VER

PutObjectInitRequestPro::PutObjectInitRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutObjectInitRequestPro::InitAsDefaultInstance() {
}

PutObjectInitRequestPro::PutObjectInitRequestPro(const PutObjectInitRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutObjectInitRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  objectsize_ = 0u;
  chunkcount_ = 0u;
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutObjectInitRequestPro::~PutObjectInitRequestPro() {
  SharedDtor();
}

void PutObjectInitRequestPro::SharedDtor() {
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (this != default_instance_) {
  }
}

void PutObjectInitRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutObjectInitRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectInitRequestPro_descriptor_;
}

const PutObjectInitRequestPro& PutObjectInitRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutObjectInitRequestPro* PutObjectInitRequestPro::default_instance_ = NULL;

PutObjectInitRequestPro* PutObjectInitRequestPro::New() const {
  return new PutObjectInitRequestPro;
}

void PutObjectInitRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    objectsize_ = 0u;
    chunkcount_ = 0u;
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutObjectInitRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_objectSize;
        break;
      }
      
      // optional fixed32 objectSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_objectSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &objectsize_)));
          set_has_objectsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutObjectInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutObjectInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutObjectInitRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 objectSize = 2;
  if (has_objectsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->objectsize(), output);
  }
  
  // optional fixed32 chunkCount = 3;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->chunkcount(), output);
  }
  
  // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 4;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 5;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->codingsetting(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutObjectInitRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 objectSize = 2;
  if (has_objectsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->objectsize(), target);
  }
  
  // optional fixed32 chunkCount = 3;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->chunkcount(), target);
  }
  
  // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 4;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 5;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->codingsetting(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutObjectInitRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 objectSize = 2;
    if (has_objectsize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 3;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 4;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 5;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutObjectInitRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutObjectInitRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutObjectInitRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutObjectInitRequestPro::MergeFrom(const PutObjectInitRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectsize()) {
      set_objectsize(from.objectsize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutObjectInitRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjectInitRequestPro::CopyFrom(const PutObjectInitRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjectInitRequestPro::IsInitialized() const {
  
  return true;
}

void PutObjectInitRequestPro::Swap(PutObjectInitRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectsize_, other->objectsize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutObjectInitRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutObjectInitRequestPro_descriptor_;
  metadata.reflection = PutObjectInitRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectDataPro::kObjectIdFieldNumber;
const int ObjectDataPro::kOffsetFieldNumber;
const int ObjectDataPro::kLengthFieldNumber;
#endif  // !_MSC_VER

ObjectDataPro::ObjectDataPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectDataPro::InitAsDefaultInstance() {
}

ObjectDataPro::ObjectDataPro(const ObjectDataPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectDataPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectDataPro::~ObjectDataPro() {
  SharedDtor();
}

void ObjectDataPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectDataPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDataPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDataPro_descriptor_;
}

const ObjectDataPro& ObjectDataPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ObjectDataPro* ObjectDataPro::default_instance_ = NULL;

ObjectDataPro* ObjectDataPro::New() const {
  return new ObjectDataPro;
}

void ObjectDataPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectDataPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_offset;
        break;
      }
      
      // optional fixed64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectDataPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->offset(), output);
  }
  
  // optional fixed32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectDataPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->offset(), target);
  }
  
  // optional fixed32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectDataPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 offset = 2;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 length = 3;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDataPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectDataPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectDataPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectDataPro::MergeFrom(const ObjectDataPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectDataPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDataPro::CopyFrom(const ObjectDataPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDataPro::IsInitialized() const {
  
  return true;
}

void ObjectDataPro::Swap(ObjectDataPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectDataPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDataPro_descriptor_;
  metadata.reflection = ObjectDataPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectRequestPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

GetObjectRequestPro::GetObjectRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectRequestPro::InitAsDefaultInstance() {
}

GetObjectRequestPro::GetObjectRequestPro(const GetObjectRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectRequestPro::~GetObjectRequestPro() {
  SharedDtor();
}

void GetObjectRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetObjectRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectRequestPro_descriptor_;
}

const GetObjectRequestPro& GetObjectRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetObjectRequestPro* GetObjectRequestPro::default_instance_ = NULL;

GetObjectRequestPro* GetObjectRequestPro::New() const {
  return new GetObjectRequestPro;
}

void GetObjectRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectRequestPro::MergeFrom(const GetObjectRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectRequestPro::CopyFrom(const GetObjectRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectRequestPro::IsInitialized() const {
  
  return true;
}

void GetObjectRequestPro::Swap(GetObjectRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectRequestPro_descriptor_;
  metadata.reflection = GetObjectRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectReadyPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

GetObjectReadyPro::GetObjectReadyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectReadyPro::InitAsDefaultInstance() {
}

GetObjectReadyPro::GetObjectReadyPro(const GetObjectReadyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectReadyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectReadyPro::~GetObjectReadyPro() {
  SharedDtor();
}

void GetObjectReadyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetObjectReadyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectReadyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectReadyPro_descriptor_;
}

const GetObjectReadyPro& GetObjectReadyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetObjectReadyPro* GetObjectReadyPro::default_instance_ = NULL;

GetObjectReadyPro* GetObjectReadyPro::New() const {
  return new GetObjectReadyPro;
}

void GetObjectReadyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectReadyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectReadyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectReadyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectReadyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectReadyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectReadyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectReadyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectReadyPro::MergeFrom(const GetObjectReadyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectReadyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectReadyPro::CopyFrom(const GetObjectReadyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectReadyPro::IsInitialized() const {
  
  return true;
}

void GetObjectReadyPro::Swap(GetObjectReadyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectReadyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectReadyPro_descriptor_;
  metadata.reflection = GetObjectReadyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectTransferEndRequestPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

ObjectTransferEndRequestPro::ObjectTransferEndRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectTransferEndRequestPro::InitAsDefaultInstance() {
}

ObjectTransferEndRequestPro::ObjectTransferEndRequestPro(const ObjectTransferEndRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectTransferEndRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectTransferEndRequestPro::~ObjectTransferEndRequestPro() {
  SharedDtor();
}

void ObjectTransferEndRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectTransferEndRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectTransferEndRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectTransferEndRequestPro_descriptor_;
}

const ObjectTransferEndRequestPro& ObjectTransferEndRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ObjectTransferEndRequestPro* ObjectTransferEndRequestPro::default_instance_ = NULL;

ObjectTransferEndRequestPro* ObjectTransferEndRequestPro::New() const {
  return new ObjectTransferEndRequestPro;
}

void ObjectTransferEndRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectTransferEndRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectTransferEndRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectTransferEndRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectTransferEndRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectTransferEndRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectTransferEndRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectTransferEndRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectTransferEndRequestPro::MergeFrom(const ObjectTransferEndRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectTransferEndRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTransferEndRequestPro::CopyFrom(const ObjectTransferEndRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTransferEndRequestPro::IsInitialized() const {
  
  return true;
}

void ObjectTransferEndRequestPro::Swap(ObjectTransferEndRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectTransferEndRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectTransferEndRequestPro_descriptor_;
  metadata.reflection = ObjectTransferEndRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListDirectoryReplyPro::kFileInfoProFieldNumber;
#endif  // !_MSC_VER

ListDirectoryReplyPro::ListDirectoryReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListDirectoryReplyPro::InitAsDefaultInstance() {
}

ListDirectoryReplyPro::ListDirectoryReplyPro(const ListDirectoryReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListDirectoryReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDirectoryReplyPro::~ListDirectoryReplyPro() {
  SharedDtor();
}

void ListDirectoryReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListDirectoryReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectoryReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDirectoryReplyPro_descriptor_;
}

const ListDirectoryReplyPro& ListDirectoryReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ListDirectoryReplyPro* ListDirectoryReplyPro::default_instance_ = NULL;

ListDirectoryReplyPro* ListDirectoryReplyPro::New() const {
  return new ListDirectoryReplyPro;
}

void ListDirectoryReplyPro::Clear() {
  fileinfopro_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDirectoryReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileInfoPro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinfopro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fileInfoPro;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListDirectoryReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinfopro(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListDirectoryReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinfopro(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListDirectoryReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  total_size += 1 * this->fileinfopro_size();
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinfopro(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectoryReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDirectoryReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDirectoryReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDirectoryReplyPro::MergeFrom(const ListDirectoryReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinfopro_.MergeFrom(from.fileinfopro_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDirectoryReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectoryReplyPro::CopyFrom(const ListDirectoryReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectoryReplyPro::IsInitialized() const {
  
  return true;
}

void ListDirectoryReplyPro::Swap(ListDirectoryReplyPro* other) {
  if (other != this) {
    fileinfopro_.Swap(&other->fileinfopro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDirectoryReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDirectoryReplyPro_descriptor_;
  metadata.reflection = ListDirectoryReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileInfoPro::kFileIdFieldNumber;
const int FileInfoPro::kFileSizeFieldNumber;
const int FileInfoPro::kFileNameFieldNumber;
#endif  // !_MSC_VER

FileInfoPro::FileInfoPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileInfoPro::InitAsDefaultInstance() {
}

FileInfoPro::FileInfoPro(const FileInfoPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileInfoPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfoPro::~FileInfoPro() {
  SharedDtor();
}

void FileInfoPro::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void FileInfoPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfoPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfoPro_descriptor_;
}

const FileInfoPro& FileInfoPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

FileInfoPro* FileInfoPro::default_instance_ = NULL;

FileInfoPro* FileInfoPro::New() const {
  return new FileInfoPro;
}

void FileInfoPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    filesize_ = GOOGLE_ULONGLONG(0);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInfoPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }
      
      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInfoPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->filesize(), output);
  }
  
  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileInfoPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->filesize(), target);
  }
  
  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileInfoPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fileSize = 2;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfoPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInfoPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInfoPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInfoPro::MergeFrom(const FileInfoPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInfoPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoPro::CopyFrom(const FileInfoPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoPro::IsInitialized() const {
  
  return true;
}

void FileInfoPro::Swap(FileInfoPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(filesize_, other->filesize_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInfoPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfoPro_descriptor_;
  metadata.reflection = FileInfoPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentLocationPro::kOsdIdFieldNumber;
const int SegmentLocationPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

SegmentLocationPro::SegmentLocationPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentLocationPro::InitAsDefaultInstance() {
}

SegmentLocationPro::SegmentLocationPro(const SegmentLocationPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentLocationPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentLocationPro::~SegmentLocationPro() {
  SharedDtor();
}

void SegmentLocationPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentLocationPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentLocationPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentLocationPro_descriptor_;
}

const SegmentLocationPro& SegmentLocationPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentLocationPro* SegmentLocationPro::default_instance_ = NULL;

SegmentLocationPro* SegmentLocationPro::New() const {
  return new SegmentLocationPro;
}

void SegmentLocationPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentLocationPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentLocationPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentLocationPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentLocationPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentLocationPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentLocationPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentLocationPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentLocationPro::MergeFrom(const SegmentLocationPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentLocationPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentLocationPro::CopyFrom(const SegmentLocationPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentLocationPro::IsInitialized() const {
  
  return true;
}

void SegmentLocationPro::Swap(SegmentLocationPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentLocationPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentLocationPro_descriptor_;
  metadata.reflection = SegmentLocationPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileReplyPro::kFileIdFieldNumber;
const int UploadFileReplyPro::kObjectListFieldNumber;
const int UploadFileReplyPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

UploadFileReplyPro::UploadFileReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileReplyPro::InitAsDefaultInstance() {
}

UploadFileReplyPro::UploadFileReplyPro(const UploadFileReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileReplyPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileReplyPro::~UploadFileReplyPro() {
  SharedDtor();
}

void UploadFileReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadFileReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileReplyPro_descriptor_;
}

const UploadFileReplyPro& UploadFileReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadFileReplyPro* UploadFileReplyPro::default_instance_ = NULL;

UploadFileReplyPro* UploadFileReplyPro::New() const {
  return new UploadFileReplyPro;
}

void UploadFileReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
  }
  objectlist_.Clear();
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_objectList;
        break;
      }
      
      // repeated fixed64 objectList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_objectList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_objectlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_objectlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_objectList;
        if (input->ExpectTag(29)) goto parse_primaryList;
        break;
      }
      
      // repeated fixed32 primaryList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // repeated fixed64 objectList = 2;
  for (int i = 0; i < this->objectlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->objectlist(i), output);
  }
  
  // repeated fixed32 primaryList = 3;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // repeated fixed64 objectList = 2;
  for (int i = 0; i < this->objectlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->objectlist(i), target);
  }
  
  // repeated fixed32 primaryList = 3;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed64 objectList = 2;
  {
    int data_size = 0;
    data_size = 8 * this->objectlist_size();
    total_size += 1 * this->objectlist_size() + data_size;
  }
  
  // repeated fixed32 primaryList = 3;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileReplyPro::MergeFrom(const UploadFileReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectlist_.MergeFrom(from.objectlist_);
  primarylist_.MergeFrom(from.primarylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileReplyPro::CopyFrom(const UploadFileReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileReplyPro::IsInitialized() const {
  
  return true;
}

void UploadFileReplyPro::Swap(UploadFileReplyPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    objectlist_.Swap(&other->objectlist_);
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileReplyPro_descriptor_;
  metadata.reflection = UploadFileReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadFileReplyPro::kFileIdFieldNumber;
const int DownloadFileReplyPro::kFileSizeFieldNumber;
const int DownloadFileReplyPro::kChecksumFieldNumber;
const int DownloadFileReplyPro::kObjectListFieldNumber;
const int DownloadFileReplyPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

DownloadFileReplyPro::DownloadFileReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadFileReplyPro::InitAsDefaultInstance() {
}

DownloadFileReplyPro::DownloadFileReplyPro(const DownloadFileReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadFileReplyPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFileReplyPro::~DownloadFileReplyPro() {
  SharedDtor();
}

void DownloadFileReplyPro::SharedDtor() {
  if (checksum_ != &::google::protobuf::internal::kEmptyString) {
    delete checksum_;
  }
  if (this != default_instance_) {
  }
}

void DownloadFileReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFileReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFileReplyPro_descriptor_;
}

const DownloadFileReplyPro& DownloadFileReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

DownloadFileReplyPro* DownloadFileReplyPro::default_instance_ = NULL;

DownloadFileReplyPro* DownloadFileReplyPro::New() const {
  return new DownloadFileReplyPro;
}

void DownloadFileReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    filesize_ = GOOGLE_ULONGLONG(0);
    if (has_checksum()) {
      if (checksum_ != &::google::protobuf::internal::kEmptyString) {
        checksum_->clear();
      }
    }
  }
  objectlist_.Clear();
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFileReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_checksum;
        break;
      }
      
      // optional string checksum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checksum().data(), this->checksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_objectList;
        break;
      }
      
      // repeated fixed64 objectList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_objectList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_objectlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_objectlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_objectList;
        if (input->ExpectTag(45)) goto parse_primaryList;
        break;
      }
      
      // repeated fixed32 primaryList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadFileReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->filesize(), output);
  }
  
  // optional string checksum = 3;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->checksum(), output);
  }
  
  // repeated fixed64 objectList = 4;
  for (int i = 0; i < this->objectlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->objectlist(i), output);
  }
  
  // repeated fixed32 primaryList = 5;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      5, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadFileReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->filesize(), target);
  }
  
  // optional string checksum = 3;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checksum(), target);
  }
  
  // repeated fixed64 objectList = 4;
  for (int i = 0; i < this->objectlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->objectlist(i), target);
  }
  
  // repeated fixed32 primaryList = 5;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(5, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadFileReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fileSize = 2;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
    // optional string checksum = 3;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checksum());
    }
    
  }
  // repeated fixed64 objectList = 4;
  {
    int data_size = 0;
    data_size = 8 * this->objectlist_size();
    total_size += 1 * this->objectlist_size() + data_size;
  }
  
  // repeated fixed32 primaryList = 5;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFileReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFileReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFileReplyPro::MergeFrom(const DownloadFileReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectlist_.MergeFrom(from.objectlist_);
  primarylist_.MergeFrom(from.primarylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFileReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFileReplyPro::CopyFrom(const DownloadFileReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileReplyPro::IsInitialized() const {
  
  return true;
}

void DownloadFileReplyPro::Swap(DownloadFileReplyPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(filesize_, other->filesize_);
    std::swap(checksum_, other->checksum_);
    objectlist_.Swap(&other->objectlist_);
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFileReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFileReplyPro_descriptor_;
  metadata.reflection = DownloadFileReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectInfoReplyPro::kObjectIdFieldNumber;
const int GetObjectInfoReplyPro::kNodeListFieldNumber;
const int GetObjectInfoReplyPro::kCodingSchemeFieldNumber;
const int GetObjectInfoReplyPro::kCodingSettingFieldNumber;
#endif  // !_MSC_VER

GetObjectInfoReplyPro::GetObjectInfoReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectInfoReplyPro::InitAsDefaultInstance() {
}

GetObjectInfoReplyPro::GetObjectInfoReplyPro(const GetObjectInfoReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectInfoReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectInfoReplyPro::~GetObjectInfoReplyPro() {
  SharedDtor();
}

void GetObjectInfoReplyPro::SharedDtor() {
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (this != default_instance_) {
  }
}

void GetObjectInfoReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectInfoReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectInfoReplyPro_descriptor_;
}

const GetObjectInfoReplyPro& GetObjectInfoReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetObjectInfoReplyPro* GetObjectInfoReplyPro::default_instance_ = NULL;

GetObjectInfoReplyPro* GetObjectInfoReplyPro::New() const {
  return new GetObjectInfoReplyPro;
}

void GetObjectInfoReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
  }
  nodelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectInfoReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_nodeList;
        break;
      }
      
      // repeated fixed32 nodeList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nodeList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_nodelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_nodelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_nodeList;
        if (input->ExpectTag(24)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutObjectInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutObjectInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectInfoReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // repeated fixed32 nodeList = 2;
  for (int i = 0; i < this->nodelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->nodelist(i), output);
  }
  
  // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 3;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 4;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->codingsetting(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectInfoReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // repeated fixed32 nodeList = 2;
  for (int i = 0; i < this->nodelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->nodelist(i), target);
  }
  
  // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 3;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 4;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->codingsetting(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectInfoReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 3;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 4;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
  }
  // repeated fixed32 nodeList = 2;
  {
    int data_size = 0;
    data_size = 4 * this->nodelist_size();
    total_size += 1 * this->nodelist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectInfoReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectInfoReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectInfoReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectInfoReplyPro::MergeFrom(const GetObjectInfoReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodelist_.MergeFrom(from.nodelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectInfoReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectInfoReplyPro::CopyFrom(const GetObjectInfoReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectInfoReplyPro::IsInitialized() const {
  
  return true;
}

void GetObjectInfoReplyPro::Swap(GetObjectInfoReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    nodelist_.Swap(&other->nodelist_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectInfoReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectInfoReplyPro_descriptor_;
  metadata.reflection = GetObjectInfoReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrimaryListRequestPro::kNumOfObjsFieldNumber;
const int GetPrimaryListRequestPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

GetPrimaryListRequestPro::GetPrimaryListRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrimaryListRequestPro::InitAsDefaultInstance() {
}

GetPrimaryListRequestPro::GetPrimaryListRequestPro(const GetPrimaryListRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrimaryListRequestPro::SharedCtor() {
  _cached_size_ = 0;
  numofobjs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrimaryListRequestPro::~GetPrimaryListRequestPro() {
  SharedDtor();
}

void GetPrimaryListRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPrimaryListRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrimaryListRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrimaryListRequestPro_descriptor_;
}

const GetPrimaryListRequestPro& GetPrimaryListRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetPrimaryListRequestPro* GetPrimaryListRequestPro::default_instance_ = NULL;

GetPrimaryListRequestPro* GetPrimaryListRequestPro::New() const {
  return new GetPrimaryListRequestPro;
}

void GetPrimaryListRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numofobjs_ = 0u;
  }
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrimaryListRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 numOfObjs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofobjs_)));
          set_has_numofobjs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_primaryList;
        break;
      }
      
      // repeated fixed32 primaryList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrimaryListRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 numOfObjs = 1;
  if (has_numofobjs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->numofobjs(), output);
  }
  
  // repeated fixed32 primaryList = 2;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrimaryListRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 numOfObjs = 1;
  if (has_numofobjs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->numofobjs(), target);
  }
  
  // repeated fixed32 primaryList = 2;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPrimaryListRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 numOfObjs = 1;
    if (has_numofobjs()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed32 primaryList = 2;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrimaryListRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrimaryListRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrimaryListRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrimaryListRequestPro::MergeFrom(const GetPrimaryListRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  primarylist_.MergeFrom(from.primarylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numofobjs()) {
      set_numofobjs(from.numofobjs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrimaryListRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrimaryListRequestPro::CopyFrom(const GetPrimaryListRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrimaryListRequestPro::IsInitialized() const {
  
  return true;
}

void GetPrimaryListRequestPro::Swap(GetPrimaryListRequestPro* other) {
  if (other != this) {
    std::swap(numofobjs_, other->numofobjs_);
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrimaryListRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrimaryListRequestPro_descriptor_;
  metadata.reflection = GetPrimaryListRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadObjectAckPro::kObjectIdFieldNumber;
const int UploadObjectAckPro::kCodingSchemeFieldNumber;
const int UploadObjectAckPro::kCodingSettingFieldNumber;
const int UploadObjectAckPro::kNodeListFieldNumber;
#endif  // !_MSC_VER

UploadObjectAckPro::UploadObjectAckPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadObjectAckPro::InitAsDefaultInstance() {
}

UploadObjectAckPro::UploadObjectAckPro(const UploadObjectAckPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadObjectAckPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadObjectAckPro::~UploadObjectAckPro() {
  SharedDtor();
}

void UploadObjectAckPro::SharedDtor() {
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (this != default_instance_) {
  }
}

void UploadObjectAckPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadObjectAckPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadObjectAckPro_descriptor_;
}

const UploadObjectAckPro& UploadObjectAckPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadObjectAckPro* UploadObjectAckPro::default_instance_ = NULL;

UploadObjectAckPro* UploadObjectAckPro::New() const {
  return new UploadObjectAckPro;
}

void UploadObjectAckPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
  }
  nodelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadObjectAckPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutObjectInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutObjectInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_nodeList;
        break;
      }
      
      // repeated fixed32 nodeList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nodeList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37, input, this->mutable_nodelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_nodelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_nodeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadObjectAckPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 2;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 3;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->codingsetting(), output);
  }
  
  // repeated fixed32 nodeList = 4;
  for (int i = 0; i < this->nodelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->nodelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadObjectAckPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 2;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 3;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->codingsetting(), target);
  }
  
  // repeated fixed32 nodeList = 4;
  for (int i = 0; i < this->nodelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(4, this->nodelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadObjectAckPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional .ncvfs.PutObjectInitRequestPro.CodingScheme codingScheme = 2;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 3;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
  }
  // repeated fixed32 nodeList = 4;
  {
    int data_size = 0;
    data_size = 4 * this->nodelist_size();
    total_size += 1 * this->nodelist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadObjectAckPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadObjectAckPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadObjectAckPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadObjectAckPro::MergeFrom(const UploadObjectAckPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodelist_.MergeFrom(from.nodelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadObjectAckPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadObjectAckPro::CopyFrom(const UploadObjectAckPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadObjectAckPro::IsInitialized() const {
  
  return true;
}

void UploadObjectAckPro::Swap(UploadObjectAckPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    nodelist_.Swap(&other->nodelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadObjectAckPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadObjectAckPro_descriptor_;
  metadata.reflection = UploadObjectAckPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectInfoRequestPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

GetObjectInfoRequestPro::GetObjectInfoRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectInfoRequestPro::InitAsDefaultInstance() {
}

GetObjectInfoRequestPro::GetObjectInfoRequestPro(const GetObjectInfoRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectInfoRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectInfoRequestPro::~GetObjectInfoRequestPro() {
  SharedDtor();
}

void GetObjectInfoRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetObjectInfoRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectInfoRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectInfoRequestPro_descriptor_;
}

const GetObjectInfoRequestPro& GetObjectInfoRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetObjectInfoRequestPro* GetObjectInfoRequestPro::default_instance_ = NULL;

GetObjectInfoRequestPro* GetObjectInfoRequestPro::New() const {
  return new GetObjectInfoRequestPro;
}

void GetObjectInfoRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectInfoRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectInfoRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectInfoRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectInfoRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectInfoRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectInfoRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectInfoRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectInfoRequestPro::MergeFrom(const GetObjectInfoRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectInfoRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectInfoRequestPro::CopyFrom(const GetObjectInfoRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectInfoRequestPro::IsInitialized() const {
  
  return true;
}

void GetObjectInfoRequestPro::Swap(GetObjectInfoRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectInfoRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectInfoRequestPro_descriptor_;
  metadata.reflection = GetObjectInfoRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutObjectInitReplyPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

PutObjectInitReplyPro::PutObjectInitReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutObjectInitReplyPro::InitAsDefaultInstance() {
}

PutObjectInitReplyPro::PutObjectInitReplyPro(const PutObjectInitReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutObjectInitReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutObjectInitReplyPro::~PutObjectInitReplyPro() {
  SharedDtor();
}

void PutObjectInitReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutObjectInitReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutObjectInitReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectInitReplyPro_descriptor_;
}

const PutObjectInitReplyPro& PutObjectInitReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutObjectInitReplyPro* PutObjectInitReplyPro::default_instance_ = NULL;

PutObjectInitReplyPro* PutObjectInitReplyPro::New() const {
  return new PutObjectInitReplyPro;
}

void PutObjectInitReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutObjectInitReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutObjectInitReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutObjectInitReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutObjectInitReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutObjectInitReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutObjectInitReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutObjectInitReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutObjectInitReplyPro::MergeFrom(const PutObjectInitReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutObjectInitReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjectInitReplyPro::CopyFrom(const PutObjectInitReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjectInitReplyPro::IsInitialized() const {
  
  return true;
}

void PutObjectInitReplyPro::Swap(PutObjectInitReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutObjectInitReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutObjectInitReplyPro_descriptor_;
  metadata.reflection = PutObjectInitReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectTransferEndReplyPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

ObjectTransferEndReplyPro::ObjectTransferEndReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectTransferEndReplyPro::InitAsDefaultInstance() {
}

ObjectTransferEndReplyPro::ObjectTransferEndReplyPro(const ObjectTransferEndReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectTransferEndReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectTransferEndReplyPro::~ObjectTransferEndReplyPro() {
  SharedDtor();
}

void ObjectTransferEndReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectTransferEndReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectTransferEndReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectTransferEndReplyPro_descriptor_;
}

const ObjectTransferEndReplyPro& ObjectTransferEndReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ObjectTransferEndReplyPro* ObjectTransferEndReplyPro::default_instance_ = NULL;

ObjectTransferEndReplyPro* ObjectTransferEndReplyPro::New() const {
  return new ObjectTransferEndReplyPro;
}

void ObjectTransferEndReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectTransferEndReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectTransferEndReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectTransferEndReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectTransferEndReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectTransferEndReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectTransferEndReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectTransferEndReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectTransferEndReplyPro::MergeFrom(const ObjectTransferEndReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectTransferEndReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTransferEndReplyPro::CopyFrom(const ObjectTransferEndReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTransferEndReplyPro::IsInitialized() const {
  
  return true;
}

void ObjectTransferEndReplyPro::Swap(ObjectTransferEndReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectTransferEndReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectTransferEndReplyPro_descriptor_;
  metadata.reflection = ObjectTransferEndReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectReplyPro::kObjectIdFieldNumber;
const int GetObjectReplyPro::kObjectSizeFieldNumber;
const int GetObjectReplyPro::kChunkCountFieldNumber;
#endif  // !_MSC_VER

GetObjectReplyPro::GetObjectReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectReplyPro::InitAsDefaultInstance() {
}

GetObjectReplyPro::GetObjectReplyPro(const GetObjectReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  objectsize_ = 0u;
  chunkcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectReplyPro::~GetObjectReplyPro() {
  SharedDtor();
}

void GetObjectReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetObjectReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectReplyPro_descriptor_;
}

const GetObjectReplyPro& GetObjectReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetObjectReplyPro* GetObjectReplyPro::default_instance_ = NULL;

GetObjectReplyPro* GetObjectReplyPro::New() const {
  return new GetObjectReplyPro;
}

void GetObjectReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    objectsize_ = 0u;
    chunkcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_objectSize;
        break;
      }
      
      // optional fixed32 objectSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_objectSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &objectsize_)));
          set_has_objectsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 objectSize = 2;
  if (has_objectsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->objectsize(), output);
  }
  
  // optional fixed32 chunkCount = 3;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->chunkcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 objectSize = 2;
  if (has_objectsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->objectsize(), target);
  }
  
  // optional fixed32 chunkCount = 3;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->chunkcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 objectSize = 2;
    if (has_objectsize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 3;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectReplyPro::MergeFrom(const GetObjectReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectsize()) {
      set_objectsize(from.objectsize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectReplyPro::CopyFrom(const GetObjectReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectReplyPro::IsInitialized() const {
  
  return true;
}

void GetObjectReplyPro::Swap(GetObjectReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectsize_, other->objectsize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectReplyPro_descriptor_;
  metadata.reflection = GetObjectReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentInitRequestPro::kObjectIdFieldNumber;
const int PutSegmentInitRequestPro::kSegmentIdFieldNumber;
const int PutSegmentInitRequestPro::kSegmentSizeFieldNumber;
const int PutSegmentInitRequestPro::kChunkCountFieldNumber;
#endif  // !_MSC_VER

PutSegmentInitRequestPro::PutSegmentInitRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentInitRequestPro::InitAsDefaultInstance() {
}

PutSegmentInitRequestPro::PutSegmentInitRequestPro(const PutSegmentInitRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentInitRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  segmentsize_ = 0u;
  chunkcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentInitRequestPro::~PutSegmentInitRequestPro() {
  SharedDtor();
}

void PutSegmentInitRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentInitRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentInitRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentInitRequestPro_descriptor_;
}

const PutSegmentInitRequestPro& PutSegmentInitRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentInitRequestPro* PutSegmentInitRequestPro::default_instance_ = NULL;

PutSegmentInitRequestPro* PutSegmentInitRequestPro::New() const {
  return new PutSegmentInitRequestPro;
}

void PutSegmentInitRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
    segmentsize_ = 0u;
    chunkcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentInitRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed32 segmentSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentInitRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  // optional fixed32 segmentSize = 3;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->segmentsize(), output);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->chunkcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentInitRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  // optional fixed32 segmentSize = 3;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->segmentsize(), target);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->chunkcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentInitRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 segmentSize = 3;
    if (has_segmentsize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 4;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentInitRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentInitRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentInitRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentInitRequestPro::MergeFrom(const PutSegmentInitRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentInitRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentInitRequestPro::CopyFrom(const PutSegmentInitRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentInitRequestPro::IsInitialized() const {
  
  return true;
}

void PutSegmentInitRequestPro::Swap(PutSegmentInitRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentInitRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentInitRequestPro_descriptor_;
  metadata.reflection = PutSegmentInitRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentDataPro::kObjectIdFieldNumber;
const int SegmentDataPro::kSegmentIdFieldNumber;
const int SegmentDataPro::kOffsetFieldNumber;
const int SegmentDataPro::kLengthFieldNumber;
#endif  // !_MSC_VER

SegmentDataPro::SegmentDataPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentDataPro::InitAsDefaultInstance() {
}

SegmentDataPro::SegmentDataPro(const SegmentDataPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentDataPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentDataPro::~SegmentDataPro() {
  SharedDtor();
}

void SegmentDataPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentDataPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentDataPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentDataPro_descriptor_;
}

const SegmentDataPro& SegmentDataPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentDataPro* SegmentDataPro::default_instance_ = NULL;

SegmentDataPro* SegmentDataPro::New() const {
  return new SegmentDataPro;
}

void SegmentDataPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentDataPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_offset;
        break;
      }
      
      // optional fixed64 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentDataPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  // optional fixed64 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->offset(), output);
  }
  
  // optional fixed32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentDataPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  // optional fixed64 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->offset(), target);
  }
  
  // optional fixed32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentDataPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 offset = 3;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 length = 4;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentDataPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentDataPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentDataPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentDataPro::MergeFrom(const SegmentDataPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentDataPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentDataPro::CopyFrom(const SegmentDataPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentDataPro::IsInitialized() const {
  
  return true;
}

void SegmentDataPro::Swap(SegmentDataPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentDataPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentDataPro_descriptor_;
  metadata.reflection = SegmentDataPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentTransferEndRequestPro::kObjectIdFieldNumber;
const int SegmentTransferEndRequestPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

SegmentTransferEndRequestPro::SegmentTransferEndRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentTransferEndRequestPro::InitAsDefaultInstance() {
}

SegmentTransferEndRequestPro::SegmentTransferEndRequestPro(const SegmentTransferEndRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentTransferEndRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentTransferEndRequestPro::~SegmentTransferEndRequestPro() {
  SharedDtor();
}

void SegmentTransferEndRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentTransferEndRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentTransferEndRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentTransferEndRequestPro_descriptor_;
}

const SegmentTransferEndRequestPro& SegmentTransferEndRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentTransferEndRequestPro* SegmentTransferEndRequestPro::default_instance_ = NULL;

SegmentTransferEndRequestPro* SegmentTransferEndRequestPro::New() const {
  return new SegmentTransferEndRequestPro;
}

void SegmentTransferEndRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentTransferEndRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentTransferEndRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentTransferEndRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentTransferEndRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentTransferEndRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentTransferEndRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentTransferEndRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentTransferEndRequestPro::MergeFrom(const SegmentTransferEndRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentTransferEndRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentTransferEndRequestPro::CopyFrom(const SegmentTransferEndRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentTransferEndRequestPro::IsInitialized() const {
  
  return true;
}

void SegmentTransferEndRequestPro::Swap(SegmentTransferEndRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentTransferEndRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentTransferEndRequestPro_descriptor_;
  metadata.reflection = SegmentTransferEndRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentInitReplyPro::kObjectIdFieldNumber;
const int PutSegmentInitReplyPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

PutSegmentInitReplyPro::PutSegmentInitReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentInitReplyPro::InitAsDefaultInstance() {
}

PutSegmentInitReplyPro::PutSegmentInitReplyPro(const PutSegmentInitReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentInitReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentInitReplyPro::~PutSegmentInitReplyPro() {
  SharedDtor();
}

void PutSegmentInitReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentInitReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentInitReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentInitReplyPro_descriptor_;
}

const PutSegmentInitReplyPro& PutSegmentInitReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentInitReplyPro* PutSegmentInitReplyPro::default_instance_ = NULL;

PutSegmentInitReplyPro* PutSegmentInitReplyPro::New() const {
  return new PutSegmentInitReplyPro;
}

void PutSegmentInitReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentInitReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentInitReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentInitReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentInitReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentInitReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentInitReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentInitReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentInitReplyPro::MergeFrom(const PutSegmentInitReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentInitReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentInitReplyPro::CopyFrom(const PutSegmentInitReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentInitReplyPro::IsInitialized() const {
  
  return true;
}

void PutSegmentInitReplyPro::Swap(PutSegmentInitReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentInitReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentInitReplyPro_descriptor_;
  metadata.reflection = PutSegmentInitReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentTransferEndReplyPro::kObjectIdFieldNumber;
const int SegmentTransferEndReplyPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

SegmentTransferEndReplyPro::SegmentTransferEndReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentTransferEndReplyPro::InitAsDefaultInstance() {
}

SegmentTransferEndReplyPro::SegmentTransferEndReplyPro(const SegmentTransferEndReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentTransferEndReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentTransferEndReplyPro::~SegmentTransferEndReplyPro() {
  SharedDtor();
}

void SegmentTransferEndReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentTransferEndReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentTransferEndReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentTransferEndReplyPro_descriptor_;
}

const SegmentTransferEndReplyPro& SegmentTransferEndReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentTransferEndReplyPro* SegmentTransferEndReplyPro::default_instance_ = NULL;

SegmentTransferEndReplyPro* SegmentTransferEndReplyPro::New() const {
  return new SegmentTransferEndReplyPro;
}

void SegmentTransferEndReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentTransferEndReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentTransferEndReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentTransferEndReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentTransferEndReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentTransferEndReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentTransferEndReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentTransferEndReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentTransferEndReplyPro::MergeFrom(const SegmentTransferEndReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentTransferEndReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentTransferEndReplyPro::CopyFrom(const SegmentTransferEndReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentTransferEndReplyPro::IsInitialized() const {
  
  return true;
}

void SegmentTransferEndReplyPro::Swap(SegmentTransferEndReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentTransferEndReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentTransferEndReplyPro_descriptor_;
  metadata.reflection = SegmentTransferEndReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSegmentInitRequestPro::kObjectIdFieldNumber;
const int GetSegmentInitRequestPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

GetSegmentInitRequestPro::GetSegmentInitRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSegmentInitRequestPro::InitAsDefaultInstance() {
}

GetSegmentInitRequestPro::GetSegmentInitRequestPro(const GetSegmentInitRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSegmentInitRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSegmentInitRequestPro::~GetSegmentInitRequestPro() {
  SharedDtor();
}

void GetSegmentInitRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSegmentInitRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSegmentInitRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSegmentInitRequestPro_descriptor_;
}

const GetSegmentInitRequestPro& GetSegmentInitRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSegmentInitRequestPro* GetSegmentInitRequestPro::default_instance_ = NULL;

GetSegmentInitRequestPro* GetSegmentInitRequestPro::New() const {
  return new GetSegmentInitRequestPro;
}

void GetSegmentInitRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSegmentInitRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSegmentInitRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSegmentInitRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSegmentInitRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSegmentInitRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSegmentInitRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSegmentInitRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSegmentInitRequestPro::MergeFrom(const GetSegmentInitRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSegmentInitRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentInitRequestPro::CopyFrom(const GetSegmentInitRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentInitRequestPro::IsInitialized() const {
  
  return true;
}

void GetSegmentInitRequestPro::Swap(GetSegmentInitRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSegmentInitRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSegmentInitRequestPro_descriptor_;
  metadata.reflection = GetSegmentInitRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSegmentInitReplyPro::kObjectIdFieldNumber;
const int GetSegmentInitReplyPro::kSegmentIdFieldNumber;
const int GetSegmentInitReplyPro::kSegmentSizeFieldNumber;
const int GetSegmentInitReplyPro::kChunkCountFieldNumber;
#endif  // !_MSC_VER

GetSegmentInitReplyPro::GetSegmentInitReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSegmentInitReplyPro::InitAsDefaultInstance() {
}

GetSegmentInitReplyPro::GetSegmentInitReplyPro(const GetSegmentInitReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSegmentInitReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  segmentsize_ = 0u;
  chunkcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSegmentInitReplyPro::~GetSegmentInitReplyPro() {
  SharedDtor();
}

void GetSegmentInitReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSegmentInitReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSegmentInitReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSegmentInitReplyPro_descriptor_;
}

const GetSegmentInitReplyPro& GetSegmentInitReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSegmentInitReplyPro* GetSegmentInitReplyPro::default_instance_ = NULL;

GetSegmentInitReplyPro* GetSegmentInitReplyPro::New() const {
  return new GetSegmentInitReplyPro;
}

void GetSegmentInitReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
    segmentsize_ = 0u;
    chunkcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSegmentInitReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed32 segmentSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSegmentInitReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  // optional fixed32 segmentSize = 3;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->segmentsize(), output);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->chunkcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSegmentInitReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  // optional fixed32 segmentSize = 3;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->segmentsize(), target);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->chunkcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSegmentInitReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 segmentSize = 3;
    if (has_segmentsize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 4;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSegmentInitReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSegmentInitReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSegmentInitReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSegmentInitReplyPro::MergeFrom(const GetSegmentInitReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSegmentInitReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentInitReplyPro::CopyFrom(const GetSegmentInitReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentInitReplyPro::IsInitialized() const {
  
  return true;
}

void GetSegmentInitReplyPro::Swap(GetSegmentInitReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSegmentInitReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSegmentInitReplyPro_descriptor_;
  metadata.reflection = GetSegmentInitReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSegmentReadyPro::kObjectIdFieldNumber;
const int GetSegmentReadyPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

GetSegmentReadyPro::GetSegmentReadyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSegmentReadyPro::InitAsDefaultInstance() {
}

GetSegmentReadyPro::GetSegmentReadyPro(const GetSegmentReadyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSegmentReadyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSegmentReadyPro::~GetSegmentReadyPro() {
  SharedDtor();
}

void GetSegmentReadyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSegmentReadyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSegmentReadyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSegmentReadyPro_descriptor_;
}

const GetSegmentReadyPro& GetSegmentReadyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSegmentReadyPro* GetSegmentReadyPro::default_instance_ = NULL;

GetSegmentReadyPro* GetSegmentReadyPro::New() const {
  return new GetSegmentReadyPro;
}

void GetSegmentReadyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSegmentReadyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSegmentReadyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSegmentReadyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSegmentReadyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSegmentReadyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSegmentReadyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSegmentReadyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSegmentReadyPro::MergeFrom(const GetSegmentReadyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSegmentReadyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentReadyPro::CopyFrom(const GetSegmentReadyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentReadyPro::IsInitialized() const {
  
  return true;
}

void GetSegmentReadyPro::Swap(GetSegmentReadyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSegmentReadyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSegmentReadyPro_descriptor_;
  metadata.reflection = GetSegmentReadyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsdStartupPro::kOsdIdFieldNumber;
const int OsdStartupPro::kOsdCapacityFieldNumber;
const int OsdStartupPro::kOsdLoadingFieldNumber;
const int OsdStartupPro::kOsdIpFieldNumber;
const int OsdStartupPro::kOsdPortFieldNumber;
#endif  // !_MSC_VER

OsdStartupPro::OsdStartupPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdStartupPro::InitAsDefaultInstance() {
}

OsdStartupPro::OsdStartupPro(const OsdStartupPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdStartupPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  osdcapacity_ = 0u;
  osdloading_ = 0u;
  osdip_ = 0u;
  osdport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdStartupPro::~OsdStartupPro() {
  SharedDtor();
}

void OsdStartupPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsdStartupPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdStartupPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdStartupPro_descriptor_;
}

const OsdStartupPro& OsdStartupPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OsdStartupPro* OsdStartupPro::default_instance_ = NULL;

OsdStartupPro* OsdStartupPro::New() const {
  return new OsdStartupPro;
}

void OsdStartupPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    osdcapacity_ = 0u;
    osdloading_ = 0u;
    osdip_ = 0u;
    osdport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdStartupPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_osdCapacity;
        break;
      }
      
      // optional fixed32 osdCapacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdcapacity_)));
          set_has_osdcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_osdLoading;
        break;
      }
      
      // optional fixed32 osdLoading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdLoading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdloading_)));
          set_has_osdloading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_osdIp;
        break;
      }
      
      // optional fixed32 osdIp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdip_)));
          set_has_osdip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_osdPort;
        break;
      }
      
      // optional fixed32 osdPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdport_)));
          set_has_osdport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsdStartupPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional fixed32 osdCapacity = 2;
  if (has_osdcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->osdcapacity(), output);
  }
  
  // optional fixed32 osdLoading = 3;
  if (has_osdloading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->osdloading(), output);
  }
  
  // optional fixed32 osdIp = 4;
  if (has_osdip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->osdip(), output);
  }
  
  // optional fixed32 osdPort = 5;
  if (has_osdport()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->osdport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdStartupPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional fixed32 osdCapacity = 2;
  if (has_osdcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->osdcapacity(), target);
  }
  
  // optional fixed32 osdLoading = 3;
  if (has_osdloading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->osdloading(), target);
  }
  
  // optional fixed32 osdIp = 4;
  if (has_osdip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->osdip(), target);
  }
  
  // optional fixed32 osdPort = 5;
  if (has_osdport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->osdport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdStartupPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdCapacity = 2;
    if (has_osdcapacity()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdLoading = 3;
    if (has_osdloading()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdIp = 4;
    if (has_osdip()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdPort = 5;
    if (has_osdport()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdStartupPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdStartupPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdStartupPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdStartupPro::MergeFrom(const OsdStartupPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_osdcapacity()) {
      set_osdcapacity(from.osdcapacity());
    }
    if (from.has_osdloading()) {
      set_osdloading(from.osdloading());
    }
    if (from.has_osdip()) {
      set_osdip(from.osdip());
    }
    if (from.has_osdport()) {
      set_osdport(from.osdport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdStartupPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStartupPro::CopyFrom(const OsdStartupPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStartupPro::IsInitialized() const {
  
  return true;
}

void OsdStartupPro::Swap(OsdStartupPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(osdcapacity_, other->osdcapacity_);
    std::swap(osdloading_, other->osdloading_);
    std::swap(osdip_, other->osdip_);
    std::swap(osdport_, other->osdport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdStartupPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdStartupPro_descriptor_;
  metadata.reflection = OsdStartupPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsdShutdownPro::kOsdIdFieldNumber;
#endif  // !_MSC_VER

OsdShutdownPro::OsdShutdownPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdShutdownPro::InitAsDefaultInstance() {
}

OsdShutdownPro::OsdShutdownPro(const OsdShutdownPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdShutdownPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdShutdownPro::~OsdShutdownPro() {
  SharedDtor();
}

void OsdShutdownPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsdShutdownPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdShutdownPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdShutdownPro_descriptor_;
}

const OsdShutdownPro& OsdShutdownPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OsdShutdownPro* OsdShutdownPro::default_instance_ = NULL;

OsdShutdownPro* OsdShutdownPro::New() const {
  return new OsdShutdownPro;
}

void OsdShutdownPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdShutdownPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsdShutdownPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdShutdownPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdShutdownPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdShutdownPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdShutdownPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdShutdownPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdShutdownPro::MergeFrom(const OsdShutdownPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdShutdownPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdShutdownPro::CopyFrom(const OsdShutdownPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdShutdownPro::IsInitialized() const {
  
  return true;
}

void OsdShutdownPro::Swap(OsdShutdownPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdShutdownPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdShutdownPro_descriptor_;
  metadata.reflection = OsdShutdownPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsdStatUpdateReplyPro::kOsdIdFieldNumber;
const int OsdStatUpdateReplyPro::kOsdCapacityFieldNumber;
const int OsdStatUpdateReplyPro::kOsdLoadingFieldNumber;
#endif  // !_MSC_VER

OsdStatUpdateReplyPro::OsdStatUpdateReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdStatUpdateReplyPro::InitAsDefaultInstance() {
}

OsdStatUpdateReplyPro::OsdStatUpdateReplyPro(const OsdStatUpdateReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdStatUpdateReplyPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  osdcapacity_ = 0u;
  osdloading_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdStatUpdateReplyPro::~OsdStatUpdateReplyPro() {
  SharedDtor();
}

void OsdStatUpdateReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsdStatUpdateReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdStatUpdateReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdStatUpdateReplyPro_descriptor_;
}

const OsdStatUpdateReplyPro& OsdStatUpdateReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OsdStatUpdateReplyPro* OsdStatUpdateReplyPro::default_instance_ = NULL;

OsdStatUpdateReplyPro* OsdStatUpdateReplyPro::New() const {
  return new OsdStatUpdateReplyPro;
}

void OsdStatUpdateReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    osdcapacity_ = 0u;
    osdloading_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdStatUpdateReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_osdCapacity;
        break;
      }
      
      // optional fixed32 osdCapacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdcapacity_)));
          set_has_osdcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_osdLoading;
        break;
      }
      
      // optional fixed32 osdLoading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdLoading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdloading_)));
          set_has_osdloading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsdStatUpdateReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional fixed32 osdCapacity = 2;
  if (has_osdcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->osdcapacity(), output);
  }
  
  // optional fixed32 osdLoading = 3;
  if (has_osdloading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->osdloading(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdStatUpdateReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional fixed32 osdCapacity = 2;
  if (has_osdcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->osdcapacity(), target);
  }
  
  // optional fixed32 osdLoading = 3;
  if (has_osdloading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->osdloading(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdStatUpdateReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdCapacity = 2;
    if (has_osdcapacity()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdLoading = 3;
    if (has_osdloading()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdStatUpdateReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdStatUpdateReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdStatUpdateReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdStatUpdateReplyPro::MergeFrom(const OsdStatUpdateReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_osdcapacity()) {
      set_osdcapacity(from.osdcapacity());
    }
    if (from.has_osdloading()) {
      set_osdloading(from.osdloading());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdStatUpdateReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStatUpdateReplyPro::CopyFrom(const OsdStatUpdateReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStatUpdateReplyPro::IsInitialized() const {
  
  return true;
}

void OsdStatUpdateReplyPro::Swap(OsdStatUpdateReplyPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(osdcapacity_, other->osdcapacity_);
    std::swap(osdloading_, other->osdloading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdStatUpdateReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdStatUpdateReplyPro_descriptor_;
  metadata.reflection = OsdStatUpdateReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSecondaryListRequestPro::kNumOfSegsFieldNumber;
const int GetSecondaryListRequestPro::kSecondaryListFieldNumber;
#endif  // !_MSC_VER

GetSecondaryListRequestPro::GetSecondaryListRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSecondaryListRequestPro::InitAsDefaultInstance() {
}

GetSecondaryListRequestPro::GetSecondaryListRequestPro(const GetSecondaryListRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSecondaryListRequestPro::SharedCtor() {
  _cached_size_ = 0;
  numofsegs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSecondaryListRequestPro::~GetSecondaryListRequestPro() {
  SharedDtor();
}

void GetSecondaryListRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSecondaryListRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSecondaryListRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSecondaryListRequestPro_descriptor_;
}

const GetSecondaryListRequestPro& GetSecondaryListRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSecondaryListRequestPro* GetSecondaryListRequestPro::default_instance_ = NULL;

GetSecondaryListRequestPro* GetSecondaryListRequestPro::New() const {
  return new GetSecondaryListRequestPro;
}

void GetSecondaryListRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numofsegs_ = 0u;
  }
  secondarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSecondaryListRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 numOfSegs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofsegs_)));
          set_has_numofsegs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secondaryList;
        break;
      }
      
      // repeated .ncvfs.SegmentLocationPro secondaryList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondaryList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secondarylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secondaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSecondaryListRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 numOfSegs = 1;
  if (has_numofsegs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->numofsegs(), output);
  }
  
  // repeated .ncvfs.SegmentLocationPro secondaryList = 2;
  for (int i = 0; i < this->secondarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->secondarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSecondaryListRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 numOfSegs = 1;
  if (has_numofsegs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->numofsegs(), target);
  }
  
  // repeated .ncvfs.SegmentLocationPro secondaryList = 2;
  for (int i = 0; i < this->secondarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->secondarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSecondaryListRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 numOfSegs = 1;
    if (has_numofsegs()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .ncvfs.SegmentLocationPro secondaryList = 2;
  total_size += 1 * this->secondarylist_size();
  for (int i = 0; i < this->secondarylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->secondarylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSecondaryListRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSecondaryListRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSecondaryListRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSecondaryListRequestPro::MergeFrom(const GetSecondaryListRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  secondarylist_.MergeFrom(from.secondarylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numofsegs()) {
      set_numofsegs(from.numofsegs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSecondaryListRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSecondaryListRequestPro::CopyFrom(const GetSecondaryListRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSecondaryListRequestPro::IsInitialized() const {
  
  return true;
}

void GetSecondaryListRequestPro::Swap(GetSecondaryListRequestPro* other) {
  if (other != this) {
    std::swap(numofsegs_, other->numofsegs_);
    secondarylist_.Swap(&other->secondarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSecondaryListRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSecondaryListRequestPro_descriptor_;
  metadata.reflection = GetSecondaryListRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OsdStatUpdateRequestPro::OsdStatUpdateRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdStatUpdateRequestPro::InitAsDefaultInstance() {
}

OsdStatUpdateRequestPro::OsdStatUpdateRequestPro(const OsdStatUpdateRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdStatUpdateRequestPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdStatUpdateRequestPro::~OsdStatUpdateRequestPro() {
  SharedDtor();
}

void OsdStatUpdateRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsdStatUpdateRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdStatUpdateRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdStatUpdateRequestPro_descriptor_;
}

const OsdStatUpdateRequestPro& OsdStatUpdateRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OsdStatUpdateRequestPro* OsdStatUpdateRequestPro::default_instance_ = NULL;

OsdStatUpdateRequestPro* OsdStatUpdateRequestPro::New() const {
  return new OsdStatUpdateRequestPro;
}

void OsdStatUpdateRequestPro::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdStatUpdateRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OsdStatUpdateRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdStatUpdateRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdStatUpdateRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdStatUpdateRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdStatUpdateRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdStatUpdateRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdStatUpdateRequestPro::MergeFrom(const OsdStatUpdateRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdStatUpdateRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStatUpdateRequestPro::CopyFrom(const OsdStatUpdateRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStatUpdateRequestPro::IsInitialized() const {
  
  return true;
}

void OsdStatUpdateRequestPro::Swap(OsdStatUpdateRequestPro* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdStatUpdateRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdStatUpdateRequestPro_descriptor_;
  metadata.reflection = OsdStatUpdateRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSecondaryListReplyPro::kSecondaryListFieldNumber;
#endif  // !_MSC_VER

GetSecondaryListReplyPro::GetSecondaryListReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSecondaryListReplyPro::InitAsDefaultInstance() {
}

GetSecondaryListReplyPro::GetSecondaryListReplyPro(const GetSecondaryListReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSecondaryListReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSecondaryListReplyPro::~GetSecondaryListReplyPro() {
  SharedDtor();
}

void GetSecondaryListReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSecondaryListReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSecondaryListReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSecondaryListReplyPro_descriptor_;
}

const GetSecondaryListReplyPro& GetSecondaryListReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSecondaryListReplyPro* GetSecondaryListReplyPro::default_instance_ = NULL;

GetSecondaryListReplyPro* GetSecondaryListReplyPro::New() const {
  return new GetSecondaryListReplyPro;
}

void GetSecondaryListReplyPro::Clear() {
  secondarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSecondaryListReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.SegmentLocationPro secondaryList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondaryList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secondarylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_secondaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSecondaryListReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.SegmentLocationPro secondaryList = 1;
  for (int i = 0; i < this->secondarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->secondarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSecondaryListReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.SegmentLocationPro secondaryList = 1;
  for (int i = 0; i < this->secondarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->secondarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSecondaryListReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.SegmentLocationPro secondaryList = 1;
  total_size += 1 * this->secondarylist_size();
  for (int i = 0; i < this->secondarylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->secondarylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSecondaryListReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSecondaryListReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSecondaryListReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSecondaryListReplyPro::MergeFrom(const GetSecondaryListReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  secondarylist_.MergeFrom(from.secondarylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSecondaryListReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSecondaryListReplyPro::CopyFrom(const GetSecondaryListReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSecondaryListReplyPro::IsInitialized() const {
  
  return true;
}

void GetSecondaryListReplyPro::Swap(GetSecondaryListReplyPro* other) {
  if (other != this) {
    secondarylist_.Swap(&other->secondarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSecondaryListReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSecondaryListReplyPro_descriptor_;
  metadata.reflection = GetSecondaryListReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrimaryListReplyPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

GetPrimaryListReplyPro::GetPrimaryListReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrimaryListReplyPro::InitAsDefaultInstance() {
}

GetPrimaryListReplyPro::GetPrimaryListReplyPro(const GetPrimaryListReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrimaryListReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrimaryListReplyPro::~GetPrimaryListReplyPro() {
  SharedDtor();
}

void GetPrimaryListReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPrimaryListReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrimaryListReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrimaryListReplyPro_descriptor_;
}

const GetPrimaryListReplyPro& GetPrimaryListReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetPrimaryListReplyPro* GetPrimaryListReplyPro::default_instance_ = NULL;

GetPrimaryListReplyPro* GetPrimaryListReplyPro::New() const {
  return new GetPrimaryListReplyPro;
}

void GetPrimaryListReplyPro::Clear() {
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrimaryListReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 primaryList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrimaryListReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed32 primaryList = 1;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrimaryListReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed32 primaryList = 1;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(1, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPrimaryListReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed32 primaryList = 1;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrimaryListReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrimaryListReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrimaryListReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrimaryListReplyPro::MergeFrom(const GetPrimaryListReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  primarylist_.MergeFrom(from.primarylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrimaryListReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrimaryListReplyPro::CopyFrom(const GetPrimaryListReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrimaryListReplyPro::IsInitialized() const {
  
  return true;
}

void GetPrimaryListReplyPro::Swap(GetPrimaryListReplyPro* other) {
  if (other != this) {
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrimaryListReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrimaryListReplyPro_descriptor_;
  metadata.reflection = GetPrimaryListReplyPro_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ncvfs

// @@protoc_insertion_point(global_scope)
