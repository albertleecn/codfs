// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ncvfs {

namespace {

const ::google::protobuf::Descriptor* ListDirectoryRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDirectoryRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDirectoryReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDirectoryReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileInfoPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfoPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutObjectInitRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutObjectInitRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectDataPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDataPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutObjectEndRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutObjectEndRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutObjectInitReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutObjectInitReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutObjectEndReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutObjectEndReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentInitRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentInitRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentDataPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentDataPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentEndRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentEndRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentInitReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentInitReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentEndReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentEndReplyPro_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  ListDirectoryRequestPro_descriptor_ = file->message_type(0);
  static const int ListDirectoryRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, directorypath_),
  };
  ListDirectoryRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDirectoryRequestPro_descriptor_,
      ListDirectoryRequestPro::default_instance_,
      ListDirectoryRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDirectoryRequestPro));
  UploadFileRequestPro_descriptor_ = file->message_type(1);
  static const int UploadFileRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, numofobj_),
  };
  UploadFileRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileRequestPro_descriptor_,
      UploadFileRequestPro::default_instance_,
      UploadFileRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileRequestPro));
  ListDirectoryReplyPro_descriptor_ = file->message_type(2);
  static const int ListDirectoryReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, fileinfopro_),
  };
  ListDirectoryReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDirectoryReplyPro_descriptor_,
      ListDirectoryReplyPro::default_instance_,
      ListDirectoryReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDirectoryReplyPro));
  FileInfoPro_descriptor_ = file->message_type(3);
  static const int FileInfoPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, filename_),
  };
  FileInfoPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInfoPro_descriptor_,
      FileInfoPro::default_instance_,
      FileInfoPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInfoPro));
  UploadFileReplyPro_descriptor_ = file->message_type(4);
  static const int UploadFileReplyPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, numofobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, objectidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, primarylist_),
  };
  UploadFileReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileReplyPro_descriptor_,
      UploadFileReplyPro::default_instance_,
      UploadFileReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileReplyPro));
  PutObjectInitRequestPro_descriptor_ = file->message_type(5);
  static const int PutObjectInitRequestPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, objectsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, chunkcount_),
  };
  PutObjectInitRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutObjectInitRequestPro_descriptor_,
      PutObjectInitRequestPro::default_instance_,
      PutObjectInitRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutObjectInitRequestPro));
  ObjectDataPro_descriptor_ = file->message_type(6);
  static const int ObjectDataPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, length_),
  };
  ObjectDataPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectDataPro_descriptor_,
      ObjectDataPro::default_instance_,
      ObjectDataPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDataPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectDataPro));
  PutObjectEndRequestPro_descriptor_ = file->message_type(7);
  static const int PutObjectEndRequestPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndRequestPro, objectid_),
  };
  PutObjectEndRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutObjectEndRequestPro_descriptor_,
      PutObjectEndRequestPro::default_instance_,
      PutObjectEndRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutObjectEndRequestPro));
  PutObjectInitReplyPro_descriptor_ = file->message_type(8);
  static const int PutObjectInitReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitReplyPro, objectid_),
  };
  PutObjectInitReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutObjectInitReplyPro_descriptor_,
      PutObjectInitReplyPro::default_instance_,
      PutObjectInitReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectInitReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutObjectInitReplyPro));
  PutObjectEndReplyPro_descriptor_ = file->message_type(9);
  static const int PutObjectEndReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndReplyPro, objectid_),
  };
  PutObjectEndReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutObjectEndReplyPro_descriptor_,
      PutObjectEndReplyPro::default_instance_,
      PutObjectEndReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutObjectEndReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutObjectEndReplyPro));
  PutSegmentInitRequestPro_descriptor_ = file->message_type(10);
  static const int PutSegmentInitRequestPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, segmentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, chunkcount_),
  };
  PutSegmentInitRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentInitRequestPro_descriptor_,
      PutSegmentInitRequestPro::default_instance_,
      PutSegmentInitRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentInitRequestPro));
  SegmentDataPro_descriptor_ = file->message_type(11);
  static const int SegmentDataPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, length_),
  };
  SegmentDataPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentDataPro_descriptor_,
      SegmentDataPro::default_instance_,
      SegmentDataPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentDataPro));
  PutSegmentEndRequestPro_descriptor_ = file->message_type(12);
  static const int PutSegmentEndRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndRequestPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndRequestPro, segmentid_),
  };
  PutSegmentEndRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentEndRequestPro_descriptor_,
      PutSegmentEndRequestPro::default_instance_,
      PutSegmentEndRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentEndRequestPro));
  PutSegmentInitReplyPro_descriptor_ = file->message_type(13);
  static const int PutSegmentInitReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, segmentid_),
  };
  PutSegmentInitReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentInitReplyPro_descriptor_,
      PutSegmentInitReplyPro::default_instance_,
      PutSegmentInitReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentInitReplyPro));
  PutSegmentEndReplyPro_descriptor_ = file->message_type(14);
  static const int PutSegmentEndReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndReplyPro, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndReplyPro, segmentid_),
  };
  PutSegmentEndReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentEndReplyPro_descriptor_,
      PutSegmentEndReplyPro::default_instance_,
      PutSegmentEndReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentEndReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentEndReplyPro));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDirectoryRequestPro_descriptor_, &ListDirectoryRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileRequestPro_descriptor_, &UploadFileRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDirectoryReplyPro_descriptor_, &ListDirectoryReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInfoPro_descriptor_, &FileInfoPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileReplyPro_descriptor_, &UploadFileReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutObjectInitRequestPro_descriptor_, &PutObjectInitRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectDataPro_descriptor_, &ObjectDataPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutObjectEndRequestPro_descriptor_, &PutObjectEndRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutObjectInitReplyPro_descriptor_, &PutObjectInitReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutObjectEndReplyPro_descriptor_, &PutObjectEndReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentInitRequestPro_descriptor_, &PutSegmentInitRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentDataPro_descriptor_, &SegmentDataPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentEndRequestPro_descriptor_, &PutSegmentEndRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentInitReplyPro_descriptor_, &PutSegmentInitReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentEndReplyPro_descriptor_, &PutSegmentEndReplyPro::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete ListDirectoryRequestPro::default_instance_;
  delete ListDirectoryRequestPro_reflection_;
  delete UploadFileRequestPro::default_instance_;
  delete UploadFileRequestPro_reflection_;
  delete ListDirectoryReplyPro::default_instance_;
  delete ListDirectoryReplyPro_reflection_;
  delete FileInfoPro::default_instance_;
  delete FileInfoPro_reflection_;
  delete UploadFileReplyPro::default_instance_;
  delete UploadFileReplyPro_reflection_;
  delete PutObjectInitRequestPro::default_instance_;
  delete PutObjectInitRequestPro_reflection_;
  delete ObjectDataPro::default_instance_;
  delete ObjectDataPro_reflection_;
  delete PutObjectEndRequestPro::default_instance_;
  delete PutObjectEndRequestPro_reflection_;
  delete PutObjectInitReplyPro::default_instance_;
  delete PutObjectInitReplyPro_reflection_;
  delete PutObjectEndReplyPro::default_instance_;
  delete PutObjectEndReplyPro_reflection_;
  delete PutSegmentInitRequestPro::default_instance_;
  delete PutSegmentInitRequestPro_reflection_;
  delete SegmentDataPro::default_instance_;
  delete SegmentDataPro_reflection_;
  delete PutSegmentEndRequestPro::default_instance_;
  delete PutSegmentEndRequestPro_reflection_;
  delete PutSegmentInitReplyPro::default_instance_;
  delete PutSegmentInitReplyPro_reflection_;
  delete PutSegmentEndReplyPro::default_instance_;
  delete PutSegmentEndReplyPro_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\005ncvfs\"\?\n\027ListDirectoryR"
    "equestPro\022\r\n\005osdId\030\001 \001(\005\022\025\n\rdirectoryPat"
    "h\030\002 \001(\t\":\n\024UploadFileRequestPro\022\020\n\010fileN"
    "ame\030\001 \002(\t\022\020\n\010numOfObj\030\002 \002(\007\"@\n\025ListDirec"
    "toryReplyPro\022\'\n\013fileInfoPro\030\001 \003(\0132\022.ncvf"
    "s.FileInfoPro\"A\n\013FileInfoPro\022\016\n\006fileId\030\001"
    " \001(\007\022\020\n\010fileSize\030\002 \001(\006\022\020\n\010fileName\030\003 \001(\t"
    "\"a\n\022UploadFileReplyPro\022\016\n\006fileId\030\001 \002(\007\022\020"
    "\n\010numOfObj\030\002 \002(\007\022\024\n\014objectIdList\030\003 \003(\006\022\023"
    "\n\013primaryList\030\004 \003(\007\"S\n\027PutObjectInitRequ"
    "estPro\022\020\n\010objectId\030\001 \001(\006\022\022\n\nobjectSize\030\002"
    " \001(\007\022\022\n\nchunkCount\030\003 \001(\007\"A\n\rObjectDataPr"
    "o\022\020\n\010objectId\030\001 \001(\006\022\016\n\006offset\030\002 \001(\006\022\016\n\006l"
    "ength\030\003 \001(\007\"*\n\026PutObjectEndRequestPro\022\020\n"
    "\010objectId\030\001 \001(\006\")\n\025PutObjectInitReplyPro"
    "\022\020\n\010objectId\030\001 \001(\006\"(\n\024PutObjectEndReplyP"
    "ro\022\020\n\010objectId\030\001 \001(\006\"h\n\030PutSegmentInitRe"
    "questPro\022\020\n\010objectId\030\001 \001(\006\022\021\n\tsegmentId\030"
    "\002 \001(\007\022\023\n\013segmentSize\030\003 \001(\007\022\022\n\nchunkCount"
    "\030\004 \001(\007\"U\n\016SegmentDataPro\022\020\n\010objectId\030\001 \001"
    "(\006\022\021\n\tsegmentId\030\002 \001(\007\022\016\n\006offset\030\003 \001(\006\022\016\n"
    "\006length\030\004 \001(\007\">\n\027PutSegmentEndRequestPro"
    "\022\020\n\010objectId\030\001 \001(\006\022\021\n\tsegmentId\030\002 \001(\007\"=\n"
    "\026PutSegmentInitReplyPro\022\020\n\010objectId\030\001 \001("
    "\006\022\021\n\tsegmentId\030\002 \001(\007\"<\n\025PutSegmentEndRep"
    "lyPro\022\020\n\010objectId\030\001 \001(\006\022\021\n\tsegmentId\030\002 \001"
    "(\007", 1042);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ListDirectoryRequestPro::default_instance_ = new ListDirectoryRequestPro();
  UploadFileRequestPro::default_instance_ = new UploadFileRequestPro();
  ListDirectoryReplyPro::default_instance_ = new ListDirectoryReplyPro();
  FileInfoPro::default_instance_ = new FileInfoPro();
  UploadFileReplyPro::default_instance_ = new UploadFileReplyPro();
  PutObjectInitRequestPro::default_instance_ = new PutObjectInitRequestPro();
  ObjectDataPro::default_instance_ = new ObjectDataPro();
  PutObjectEndRequestPro::default_instance_ = new PutObjectEndRequestPro();
  PutObjectInitReplyPro::default_instance_ = new PutObjectInitReplyPro();
  PutObjectEndReplyPro::default_instance_ = new PutObjectEndReplyPro();
  PutSegmentInitRequestPro::default_instance_ = new PutSegmentInitRequestPro();
  SegmentDataPro::default_instance_ = new SegmentDataPro();
  PutSegmentEndRequestPro::default_instance_ = new PutSegmentEndRequestPro();
  PutSegmentInitReplyPro::default_instance_ = new PutSegmentInitReplyPro();
  PutSegmentEndReplyPro::default_instance_ = new PutSegmentEndReplyPro();
  ListDirectoryRequestPro::default_instance_->InitAsDefaultInstance();
  UploadFileRequestPro::default_instance_->InitAsDefaultInstance();
  ListDirectoryReplyPro::default_instance_->InitAsDefaultInstance();
  FileInfoPro::default_instance_->InitAsDefaultInstance();
  UploadFileReplyPro::default_instance_->InitAsDefaultInstance();
  PutObjectInitRequestPro::default_instance_->InitAsDefaultInstance();
  ObjectDataPro::default_instance_->InitAsDefaultInstance();
  PutObjectEndRequestPro::default_instance_->InitAsDefaultInstance();
  PutObjectInitReplyPro::default_instance_->InitAsDefaultInstance();
  PutObjectEndReplyPro::default_instance_->InitAsDefaultInstance();
  PutSegmentInitRequestPro::default_instance_->InitAsDefaultInstance();
  SegmentDataPro::default_instance_->InitAsDefaultInstance();
  PutSegmentEndRequestPro::default_instance_->InitAsDefaultInstance();
  PutSegmentInitReplyPro::default_instance_->InitAsDefaultInstance();
  PutSegmentEndReplyPro::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ListDirectoryRequestPro::kOsdIdFieldNumber;
const int ListDirectoryRequestPro::kDirectoryPathFieldNumber;
#endif  // !_MSC_VER

ListDirectoryRequestPro::ListDirectoryRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListDirectoryRequestPro::InitAsDefaultInstance() {
}

ListDirectoryRequestPro::ListDirectoryRequestPro(const ListDirectoryRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListDirectoryRequestPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0;
  directorypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDirectoryRequestPro::~ListDirectoryRequestPro() {
  SharedDtor();
}

void ListDirectoryRequestPro::SharedDtor() {
  if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
    delete directorypath_;
  }
  if (this != default_instance_) {
  }
}

void ListDirectoryRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectoryRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDirectoryRequestPro_descriptor_;
}

const ListDirectoryRequestPro& ListDirectoryRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ListDirectoryRequestPro* ListDirectoryRequestPro::default_instance_ = NULL;

ListDirectoryRequestPro* ListDirectoryRequestPro::New() const {
  return new ListDirectoryRequestPro;
}

void ListDirectoryRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0;
    if (has_directorypath()) {
      if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
        directorypath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDirectoryRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_directoryPath;
        break;
      }
      
      // optional string directoryPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directoryPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directorypath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directorypath().data(), this->directorypath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListDirectoryRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->osdid(), output);
  }
  
  // optional string directoryPath = 2;
  if (has_directorypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directorypath().data(), this->directorypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->directorypath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListDirectoryRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->osdid(), target);
  }
  
  // optional string directoryPath = 2;
  if (has_directorypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directorypath().data(), this->directorypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directorypath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListDirectoryRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->osdid());
    }
    
    // optional string directoryPath = 2;
    if (has_directorypath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directorypath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectoryRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDirectoryRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDirectoryRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDirectoryRequestPro::MergeFrom(const ListDirectoryRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_directorypath()) {
      set_directorypath(from.directorypath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDirectoryRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectoryRequestPro::CopyFrom(const ListDirectoryRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectoryRequestPro::IsInitialized() const {
  
  return true;
}

void ListDirectoryRequestPro::Swap(ListDirectoryRequestPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(directorypath_, other->directorypath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDirectoryRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDirectoryRequestPro_descriptor_;
  metadata.reflection = ListDirectoryRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileRequestPro::kFileNameFieldNumber;
const int UploadFileRequestPro::kNumOfObjFieldNumber;
#endif  // !_MSC_VER

UploadFileRequestPro::UploadFileRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileRequestPro::InitAsDefaultInstance() {
}

UploadFileRequestPro::UploadFileRequestPro(const UploadFileRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileRequestPro::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numofobj_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileRequestPro::~UploadFileRequestPro() {
  SharedDtor();
}

void UploadFileRequestPro::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void UploadFileRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileRequestPro_descriptor_;
}

const UploadFileRequestPro& UploadFileRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadFileRequestPro* UploadFileRequestPro::default_instance_ = NULL;

UploadFileRequestPro* UploadFileRequestPro::New() const {
  return new UploadFileRequestPro;
}

void UploadFileRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    numofobj_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_numOfObj;
        break;
      }
      
      // required fixed32 numOfObj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_numOfObj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofobj_)));
          set_has_numofobj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  // required fixed32 numOfObj = 2;
  if (has_numofobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->numofobj(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  // required fixed32 numOfObj = 2;
  if (has_numofobj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->numofobj(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // required fixed32 numOfObj = 2;
    if (has_numofobj()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileRequestPro::MergeFrom(const UploadFileRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_numofobj()) {
      set_numofobj(from.numofobj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileRequestPro::CopyFrom(const UploadFileRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileRequestPro::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UploadFileRequestPro::Swap(UploadFileRequestPro* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(numofobj_, other->numofobj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileRequestPro_descriptor_;
  metadata.reflection = UploadFileRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListDirectoryReplyPro::kFileInfoProFieldNumber;
#endif  // !_MSC_VER

ListDirectoryReplyPro::ListDirectoryReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListDirectoryReplyPro::InitAsDefaultInstance() {
}

ListDirectoryReplyPro::ListDirectoryReplyPro(const ListDirectoryReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListDirectoryReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDirectoryReplyPro::~ListDirectoryReplyPro() {
  SharedDtor();
}

void ListDirectoryReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListDirectoryReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectoryReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDirectoryReplyPro_descriptor_;
}

const ListDirectoryReplyPro& ListDirectoryReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ListDirectoryReplyPro* ListDirectoryReplyPro::default_instance_ = NULL;

ListDirectoryReplyPro* ListDirectoryReplyPro::New() const {
  return new ListDirectoryReplyPro;
}

void ListDirectoryReplyPro::Clear() {
  fileinfopro_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDirectoryReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileInfoPro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinfopro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fileInfoPro;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListDirectoryReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinfopro(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListDirectoryReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinfopro(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListDirectoryReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  total_size += 1 * this->fileinfopro_size();
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinfopro(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectoryReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDirectoryReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDirectoryReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDirectoryReplyPro::MergeFrom(const ListDirectoryReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinfopro_.MergeFrom(from.fileinfopro_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDirectoryReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectoryReplyPro::CopyFrom(const ListDirectoryReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectoryReplyPro::IsInitialized() const {
  
  return true;
}

void ListDirectoryReplyPro::Swap(ListDirectoryReplyPro* other) {
  if (other != this) {
    fileinfopro_.Swap(&other->fileinfopro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDirectoryReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDirectoryReplyPro_descriptor_;
  metadata.reflection = ListDirectoryReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileInfoPro::kFileIdFieldNumber;
const int FileInfoPro::kFileSizeFieldNumber;
const int FileInfoPro::kFileNameFieldNumber;
#endif  // !_MSC_VER

FileInfoPro::FileInfoPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileInfoPro::InitAsDefaultInstance() {
}

FileInfoPro::FileInfoPro(const FileInfoPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileInfoPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfoPro::~FileInfoPro() {
  SharedDtor();
}

void FileInfoPro::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void FileInfoPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfoPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfoPro_descriptor_;
}

const FileInfoPro& FileInfoPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

FileInfoPro* FileInfoPro::default_instance_ = NULL;

FileInfoPro* FileInfoPro::New() const {
  return new FileInfoPro;
}

void FileInfoPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    filesize_ = GOOGLE_ULONGLONG(0);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInfoPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }
      
      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInfoPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->filesize(), output);
  }
  
  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileInfoPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->filesize(), target);
  }
  
  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileInfoPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fileSize = 2;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfoPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInfoPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInfoPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInfoPro::MergeFrom(const FileInfoPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInfoPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoPro::CopyFrom(const FileInfoPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoPro::IsInitialized() const {
  
  return true;
}

void FileInfoPro::Swap(FileInfoPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(filesize_, other->filesize_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInfoPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfoPro_descriptor_;
  metadata.reflection = FileInfoPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileReplyPro::kFileIdFieldNumber;
const int UploadFileReplyPro::kNumOfObjFieldNumber;
const int UploadFileReplyPro::kObjectIdListFieldNumber;
const int UploadFileReplyPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

UploadFileReplyPro::UploadFileReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileReplyPro::InitAsDefaultInstance() {
}

UploadFileReplyPro::UploadFileReplyPro(const UploadFileReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileReplyPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  numofobj_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileReplyPro::~UploadFileReplyPro() {
  SharedDtor();
}

void UploadFileReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadFileReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileReplyPro_descriptor_;
}

const UploadFileReplyPro& UploadFileReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadFileReplyPro* UploadFileReplyPro::default_instance_ = NULL;

UploadFileReplyPro* UploadFileReplyPro::New() const {
  return new UploadFileReplyPro;
}

void UploadFileReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    numofobj_ = 0u;
  }
  objectidlist_.Clear();
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_numOfObj;
        break;
      }
      
      // required fixed32 numOfObj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_numOfObj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofobj_)));
          set_has_numofobj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_objectIdList;
        break;
      }
      
      // repeated fixed64 objectIdList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_objectIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_objectidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_objectidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_objectIdList;
        if (input->ExpectTag(37)) goto parse_primaryList;
        break;
      }
      
      // repeated fixed32 primaryList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // required fixed32 numOfObj = 2;
  if (has_numofobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->numofobj(), output);
  }
  
  // repeated fixed64 objectIdList = 3;
  for (int i = 0; i < this->objectidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->objectidlist(i), output);
  }
  
  // repeated fixed32 primaryList = 4;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // required fixed32 numOfObj = 2;
  if (has_numofobj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->numofobj(), target);
  }
  
  // repeated fixed64 objectIdList = 3;
  for (int i = 0; i < this->objectidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->objectidlist(i), target);
  }
  
  // repeated fixed32 primaryList = 4;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(4, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // required fixed32 numOfObj = 2;
    if (has_numofobj()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed64 objectIdList = 3;
  {
    int data_size = 0;
    data_size = 8 * this->objectidlist_size();
    total_size += 1 * this->objectidlist_size() + data_size;
  }
  
  // repeated fixed32 primaryList = 4;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileReplyPro::MergeFrom(const UploadFileReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectidlist_.MergeFrom(from.objectidlist_);
  primarylist_.MergeFrom(from.primarylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_numofobj()) {
      set_numofobj(from.numofobj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileReplyPro::CopyFrom(const UploadFileReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileReplyPro::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UploadFileReplyPro::Swap(UploadFileReplyPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(numofobj_, other->numofobj_);
    objectidlist_.Swap(&other->objectidlist_);
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileReplyPro_descriptor_;
  metadata.reflection = UploadFileReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutObjectInitRequestPro::kObjectIdFieldNumber;
const int PutObjectInitRequestPro::kObjectSizeFieldNumber;
const int PutObjectInitRequestPro::kChunkCountFieldNumber;
#endif  // !_MSC_VER

PutObjectInitRequestPro::PutObjectInitRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutObjectInitRequestPro::InitAsDefaultInstance() {
}

PutObjectInitRequestPro::PutObjectInitRequestPro(const PutObjectInitRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutObjectInitRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  objectsize_ = 0u;
  chunkcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutObjectInitRequestPro::~PutObjectInitRequestPro() {
  SharedDtor();
}

void PutObjectInitRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutObjectInitRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutObjectInitRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectInitRequestPro_descriptor_;
}

const PutObjectInitRequestPro& PutObjectInitRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutObjectInitRequestPro* PutObjectInitRequestPro::default_instance_ = NULL;

PutObjectInitRequestPro* PutObjectInitRequestPro::New() const {
  return new PutObjectInitRequestPro;
}

void PutObjectInitRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    objectsize_ = 0u;
    chunkcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutObjectInitRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_objectSize;
        break;
      }
      
      // optional fixed32 objectSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_objectSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &objectsize_)));
          set_has_objectsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutObjectInitRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 objectSize = 2;
  if (has_objectsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->objectsize(), output);
  }
  
  // optional fixed32 chunkCount = 3;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->chunkcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutObjectInitRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 objectSize = 2;
  if (has_objectsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->objectsize(), target);
  }
  
  // optional fixed32 chunkCount = 3;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->chunkcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutObjectInitRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 objectSize = 2;
    if (has_objectsize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 3;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutObjectInitRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutObjectInitRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutObjectInitRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutObjectInitRequestPro::MergeFrom(const PutObjectInitRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectsize()) {
      set_objectsize(from.objectsize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutObjectInitRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjectInitRequestPro::CopyFrom(const PutObjectInitRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjectInitRequestPro::IsInitialized() const {
  
  return true;
}

void PutObjectInitRequestPro::Swap(PutObjectInitRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectsize_, other->objectsize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutObjectInitRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutObjectInitRequestPro_descriptor_;
  metadata.reflection = PutObjectInitRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectDataPro::kObjectIdFieldNumber;
const int ObjectDataPro::kOffsetFieldNumber;
const int ObjectDataPro::kLengthFieldNumber;
#endif  // !_MSC_VER

ObjectDataPro::ObjectDataPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectDataPro::InitAsDefaultInstance() {
}

ObjectDataPro::ObjectDataPro(const ObjectDataPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectDataPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectDataPro::~ObjectDataPro() {
  SharedDtor();
}

void ObjectDataPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectDataPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDataPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDataPro_descriptor_;
}

const ObjectDataPro& ObjectDataPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ObjectDataPro* ObjectDataPro::default_instance_ = NULL;

ObjectDataPro* ObjectDataPro::New() const {
  return new ObjectDataPro;
}

void ObjectDataPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectDataPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_offset;
        break;
      }
      
      // optional fixed64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectDataPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->offset(), output);
  }
  
  // optional fixed32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectDataPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->offset(), target);
  }
  
  // optional fixed32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectDataPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 offset = 2;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 length = 3;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDataPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectDataPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectDataPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectDataPro::MergeFrom(const ObjectDataPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectDataPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDataPro::CopyFrom(const ObjectDataPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDataPro::IsInitialized() const {
  
  return true;
}

void ObjectDataPro::Swap(ObjectDataPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectDataPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDataPro_descriptor_;
  metadata.reflection = ObjectDataPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutObjectEndRequestPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

PutObjectEndRequestPro::PutObjectEndRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutObjectEndRequestPro::InitAsDefaultInstance() {
}

PutObjectEndRequestPro::PutObjectEndRequestPro(const PutObjectEndRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutObjectEndRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutObjectEndRequestPro::~PutObjectEndRequestPro() {
  SharedDtor();
}

void PutObjectEndRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutObjectEndRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutObjectEndRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectEndRequestPro_descriptor_;
}

const PutObjectEndRequestPro& PutObjectEndRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutObjectEndRequestPro* PutObjectEndRequestPro::default_instance_ = NULL;

PutObjectEndRequestPro* PutObjectEndRequestPro::New() const {
  return new PutObjectEndRequestPro;
}

void PutObjectEndRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutObjectEndRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutObjectEndRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutObjectEndRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutObjectEndRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutObjectEndRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutObjectEndRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutObjectEndRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutObjectEndRequestPro::MergeFrom(const PutObjectEndRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutObjectEndRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjectEndRequestPro::CopyFrom(const PutObjectEndRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjectEndRequestPro::IsInitialized() const {
  
  return true;
}

void PutObjectEndRequestPro::Swap(PutObjectEndRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutObjectEndRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutObjectEndRequestPro_descriptor_;
  metadata.reflection = PutObjectEndRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutObjectInitReplyPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

PutObjectInitReplyPro::PutObjectInitReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutObjectInitReplyPro::InitAsDefaultInstance() {
}

PutObjectInitReplyPro::PutObjectInitReplyPro(const PutObjectInitReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutObjectInitReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutObjectInitReplyPro::~PutObjectInitReplyPro() {
  SharedDtor();
}

void PutObjectInitReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutObjectInitReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutObjectInitReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectInitReplyPro_descriptor_;
}

const PutObjectInitReplyPro& PutObjectInitReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutObjectInitReplyPro* PutObjectInitReplyPro::default_instance_ = NULL;

PutObjectInitReplyPro* PutObjectInitReplyPro::New() const {
  return new PutObjectInitReplyPro;
}

void PutObjectInitReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutObjectInitReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutObjectInitReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutObjectInitReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutObjectInitReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutObjectInitReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutObjectInitReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutObjectInitReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutObjectInitReplyPro::MergeFrom(const PutObjectInitReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutObjectInitReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjectInitReplyPro::CopyFrom(const PutObjectInitReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjectInitReplyPro::IsInitialized() const {
  
  return true;
}

void PutObjectInitReplyPro::Swap(PutObjectInitReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutObjectInitReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutObjectInitReplyPro_descriptor_;
  metadata.reflection = PutObjectInitReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutObjectEndReplyPro::kObjectIdFieldNumber;
#endif  // !_MSC_VER

PutObjectEndReplyPro::PutObjectEndReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutObjectEndReplyPro::InitAsDefaultInstance() {
}

PutObjectEndReplyPro::PutObjectEndReplyPro(const PutObjectEndReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutObjectEndReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutObjectEndReplyPro::~PutObjectEndReplyPro() {
  SharedDtor();
}

void PutObjectEndReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutObjectEndReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutObjectEndReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutObjectEndReplyPro_descriptor_;
}

const PutObjectEndReplyPro& PutObjectEndReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutObjectEndReplyPro* PutObjectEndReplyPro::default_instance_ = NULL;

PutObjectEndReplyPro* PutObjectEndReplyPro::New() const {
  return new PutObjectEndReplyPro;
}

void PutObjectEndReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutObjectEndReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutObjectEndReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutObjectEndReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutObjectEndReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutObjectEndReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutObjectEndReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutObjectEndReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutObjectEndReplyPro::MergeFrom(const PutObjectEndReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutObjectEndReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjectEndReplyPro::CopyFrom(const PutObjectEndReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjectEndReplyPro::IsInitialized() const {
  
  return true;
}

void PutObjectEndReplyPro::Swap(PutObjectEndReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutObjectEndReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutObjectEndReplyPro_descriptor_;
  metadata.reflection = PutObjectEndReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentInitRequestPro::kObjectIdFieldNumber;
const int PutSegmentInitRequestPro::kSegmentIdFieldNumber;
const int PutSegmentInitRequestPro::kSegmentSizeFieldNumber;
const int PutSegmentInitRequestPro::kChunkCountFieldNumber;
#endif  // !_MSC_VER

PutSegmentInitRequestPro::PutSegmentInitRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentInitRequestPro::InitAsDefaultInstance() {
}

PutSegmentInitRequestPro::PutSegmentInitRequestPro(const PutSegmentInitRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentInitRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  segmentsize_ = 0u;
  chunkcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentInitRequestPro::~PutSegmentInitRequestPro() {
  SharedDtor();
}

void PutSegmentInitRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentInitRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentInitRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentInitRequestPro_descriptor_;
}

const PutSegmentInitRequestPro& PutSegmentInitRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentInitRequestPro* PutSegmentInitRequestPro::default_instance_ = NULL;

PutSegmentInitRequestPro* PutSegmentInitRequestPro::New() const {
  return new PutSegmentInitRequestPro;
}

void PutSegmentInitRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
    segmentsize_ = 0u;
    chunkcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentInitRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed32 segmentSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentInitRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  // optional fixed32 segmentSize = 3;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->segmentsize(), output);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->chunkcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentInitRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  // optional fixed32 segmentSize = 3;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->segmentsize(), target);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->chunkcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentInitRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 segmentSize = 3;
    if (has_segmentsize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 4;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentInitRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentInitRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentInitRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentInitRequestPro::MergeFrom(const PutSegmentInitRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentInitRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentInitRequestPro::CopyFrom(const PutSegmentInitRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentInitRequestPro::IsInitialized() const {
  
  return true;
}

void PutSegmentInitRequestPro::Swap(PutSegmentInitRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentInitRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentInitRequestPro_descriptor_;
  metadata.reflection = PutSegmentInitRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentDataPro::kObjectIdFieldNumber;
const int SegmentDataPro::kSegmentIdFieldNumber;
const int SegmentDataPro::kOffsetFieldNumber;
const int SegmentDataPro::kLengthFieldNumber;
#endif  // !_MSC_VER

SegmentDataPro::SegmentDataPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentDataPro::InitAsDefaultInstance() {
}

SegmentDataPro::SegmentDataPro(const SegmentDataPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentDataPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentDataPro::~SegmentDataPro() {
  SharedDtor();
}

void SegmentDataPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentDataPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentDataPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentDataPro_descriptor_;
}

const SegmentDataPro& SegmentDataPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentDataPro* SegmentDataPro::default_instance_ = NULL;

SegmentDataPro* SegmentDataPro::New() const {
  return new SegmentDataPro;
}

void SegmentDataPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentDataPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_offset;
        break;
      }
      
      // optional fixed64 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentDataPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  // optional fixed64 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->offset(), output);
  }
  
  // optional fixed32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentDataPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  // optional fixed64 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->offset(), target);
  }
  
  // optional fixed32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentDataPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 offset = 3;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 length = 4;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentDataPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentDataPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentDataPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentDataPro::MergeFrom(const SegmentDataPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentDataPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentDataPro::CopyFrom(const SegmentDataPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentDataPro::IsInitialized() const {
  
  return true;
}

void SegmentDataPro::Swap(SegmentDataPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentDataPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentDataPro_descriptor_;
  metadata.reflection = SegmentDataPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentEndRequestPro::kObjectIdFieldNumber;
const int PutSegmentEndRequestPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

PutSegmentEndRequestPro::PutSegmentEndRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentEndRequestPro::InitAsDefaultInstance() {
}

PutSegmentEndRequestPro::PutSegmentEndRequestPro(const PutSegmentEndRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentEndRequestPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentEndRequestPro::~PutSegmentEndRequestPro() {
  SharedDtor();
}

void PutSegmentEndRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentEndRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentEndRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentEndRequestPro_descriptor_;
}

const PutSegmentEndRequestPro& PutSegmentEndRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentEndRequestPro* PutSegmentEndRequestPro::default_instance_ = NULL;

PutSegmentEndRequestPro* PutSegmentEndRequestPro::New() const {
  return new PutSegmentEndRequestPro;
}

void PutSegmentEndRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentEndRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentEndRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentEndRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentEndRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentEndRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentEndRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentEndRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentEndRequestPro::MergeFrom(const PutSegmentEndRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentEndRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentEndRequestPro::CopyFrom(const PutSegmentEndRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentEndRequestPro::IsInitialized() const {
  
  return true;
}

void PutSegmentEndRequestPro::Swap(PutSegmentEndRequestPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentEndRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentEndRequestPro_descriptor_;
  metadata.reflection = PutSegmentEndRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentInitReplyPro::kObjectIdFieldNumber;
const int PutSegmentInitReplyPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

PutSegmentInitReplyPro::PutSegmentInitReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentInitReplyPro::InitAsDefaultInstance() {
}

PutSegmentInitReplyPro::PutSegmentInitReplyPro(const PutSegmentInitReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentInitReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentInitReplyPro::~PutSegmentInitReplyPro() {
  SharedDtor();
}

void PutSegmentInitReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentInitReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentInitReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentInitReplyPro_descriptor_;
}

const PutSegmentInitReplyPro& PutSegmentInitReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentInitReplyPro* PutSegmentInitReplyPro::default_instance_ = NULL;

PutSegmentInitReplyPro* PutSegmentInitReplyPro::New() const {
  return new PutSegmentInitReplyPro;
}

void PutSegmentInitReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentInitReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentInitReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentInitReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentInitReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentInitReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentInitReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentInitReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentInitReplyPro::MergeFrom(const PutSegmentInitReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentInitReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentInitReplyPro::CopyFrom(const PutSegmentInitReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentInitReplyPro::IsInitialized() const {
  
  return true;
}

void PutSegmentInitReplyPro::Swap(PutSegmentInitReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentInitReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentInitReplyPro_descriptor_;
  metadata.reflection = PutSegmentInitReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentEndReplyPro::kObjectIdFieldNumber;
const int PutSegmentEndReplyPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

PutSegmentEndReplyPro::PutSegmentEndReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentEndReplyPro::InitAsDefaultInstance() {
}

PutSegmentEndReplyPro::PutSegmentEndReplyPro(const PutSegmentEndReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentEndReplyPro::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  segmentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentEndReplyPro::~PutSegmentEndReplyPro() {
  SharedDtor();
}

void PutSegmentEndReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentEndReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentEndReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentEndReplyPro_descriptor_;
}

const PutSegmentEndReplyPro& PutSegmentEndReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentEndReplyPro* PutSegmentEndReplyPro::default_instance_ = NULL;

PutSegmentEndReplyPro* PutSegmentEndReplyPro::New() const {
  return new PutSegmentEndReplyPro;
}

void PutSegmentEndReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    segmentid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentEndReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentId;
        break;
      }
      
      // optional fixed32 segmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentEndReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->objectid(), output);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentEndReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->objectid(), target);
  }
  
  // optional fixed32 segmentId = 2;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentEndReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentId = 2;
    if (has_segmentid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentEndReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentEndReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentEndReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentEndReplyPro::MergeFrom(const PutSegmentEndReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentEndReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentEndReplyPro::CopyFrom(const PutSegmentEndReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentEndReplyPro::IsInitialized() const {
  
  return true;
}

void PutSegmentEndReplyPro::Swap(PutSegmentEndReplyPro* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentEndReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentEndReplyPro_descriptor_;
  metadata.reflection = PutSegmentEndReplyPro_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ncvfs

// @@protoc_insertion_point(global_scope)
